package main

import (
	"time"

	"github.com/GeertJohan/go.rice/embedded"
)

func init() {

	// define files
	file2 := &embedded.EmbeddedFile{
		Filename:    "favicon.ico",
		FileModTime: time.Unix(1570861117, 0),

		Content: string("\x00\x00\x01\x00\x01\x00@@\x00\x00\x01\x00 \x00(B\x00\x00\x16\x00\x00\x00(\x00\x00\x00@\x00\x00\x00\x80\x00\x00\x00\x01\x00 \x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 \x1e#\x00 \x1e#\x16 \x1f\"P \x1e\"\x87 \x1e\"\xbb \x1e\"\xd3 \x1e\"\xdf \x1e\"\xe1 \x1e\"\xe3 \x1e#\xe3 \x1e\"\xe3 \x1f\"\xe3 \x1e\"\xe3 \x1e\"\xe3 \x1e#\xe3 \x1e#\xe3 \x1e#\xe3 \x1e\"\xe3 \x1e\"\xe3 \x1e\"\xe3 \x1e\"\xe3 \x1e\"\xe3 \x1e\"\xe3 \x1e\"\xe3 \x1e#\xe3 \x1e#\xe3 \x1e\"\xe3 \x1e\"\xe3 \x1f\"\xe3 \x1e\"\xe3 \x1e#\xe3 \x1f#\xe3 \x1e\"\xe3 \x1e\"\xe3 \x1e\"\xe3 \x1e#\xe3 \x1e#\xe3 \x1e\"\xe3 \x1e\"\xe3 \x1e\"\xe3 \x1e\"\xe3 \x1e\"\xe1 \x1e\"\xdb \x1e\"\xcb \x1e\"\xa3 \x1e\"n \x1e\"2 \x1e\"\b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 \x1f#\x02 \x1e\"\x1a \x1e\"p \x1e#\xc9 \x1e\"\xf1 \x1e\"\xfd \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e#\xff \x1e#\xff \x1e#\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e#\xff \x1e#\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xf9 \x1e\"\xdf \x1e\"\xa7 \x1e#@ \x1e#\b \x1f#\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 \x1f#\x06 \x1f#N \x1e\"\xcd \x1e\"\xfd \x1e#\xff \x1e\"\xff \x1e\"\xff \x1f#\xff \x1e#\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e#\xff \x1e#\xff \x1e\"\xff \x1e#\xff \x1e#\xff \x1e#\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1f#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e#\xff \x1e#\xff \x1e#\xff \x1e#\xff \x1e#\xff \x1e#\xff \x1e#\xff \x1e\"\xff \x1f#\xff \x1f#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xf3 \x1e#\x91 \x1e# \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 \x1e#\n \x1e\"\x81 \x1e#\xe9 \x1e\"\xff \x1e\"\xff \x1f\"\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1f#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e#\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e#\xff \x1f\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xfb \x1e\"\xcd \x1e\"2 \x1e\"\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 \x1e#\n \x1e#z \x1e\"\xf9 \x1e#\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1f#\xff \x1e#\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1f#\xff \x1e#\xff \x1e#\xff \x1e#\xff \x1f#\xff \x1e#\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1f#\xff \x1e\"\xd1 \x1e\"6\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 \x1e#\x04 \x1e\"x \x1e#\xf9 \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1f\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e#\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1f\"\xff \x1e#\xd5 \x1e#( \x1f#\x00\x00\x00\x00\x00\x00\x00\x00\x00 \x1f\"\x00 \x1e\"@ \x1e\"\xe5 \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1f#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1f\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xfd \x1e\"\xa5 \x1e\"\x0e\x00\x00\x00\x00\x00\x00\x00\x00 \x1e\"\x10 \x1e\"\xbb \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1f\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1f#\xff \x1f\"\xff\"!%\xfd*(,\xf9.-0\xf9/.2\xf9,+/\xf9&%(\xfb \x1f\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1f\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1f\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1f\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xf9 \x1e#X \x1f\"\x00\x00\x00\x00\x00 \x1e\"T \x1e\"\xf9 \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1f\"\xff&%)\xfd87:\xfbNMO\xf9vuv\xf7\x96\x95\x96\xf5\xaa\xa8\xa8\xfb\xb5\xb3\xb3\xf9\xba\xb9\xb8\xf9\xbb\xb9\xb9\xf9\xb8\xb7\xb6\xf7\xb0\xae\xaf\xf9\xa2\xa0\xa1\xf9\x88\x87\x88\xf7a`b\xf7CBE\xfb.-1\xfd\"!$\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1f\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xc1 \x1e#\x16 \x1e#\b \x1e\"\xb1 \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff'%)\xfbWUW\xf9\x90\x8e\x8f\xf9\xb9\xb7\xb7\xf9\xd0\xce\xcd\xfd\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd4\xd1\xd0\xff\xd3\xd1\xd0\xff\xd4\xd2\xd0\xff\xd3\xd2\xd0\xff\xd3\xd2\xd0\xff\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd3\xd2\xd0\xff\xd3\xd1\xd0\xff\xc8\xc6\xc5\xfb\xa7\xa6\xa6\xf9xvx\xf7<;=\xf9 \x1f#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1f\"\xff \x1f\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e\"\xef \x1e#N \x1e#4 \x1e\"\xe1 \x1f\"\xff \x1f\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1f\"\xff \x1e\"\xff \x1f\"\xff \x1f\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1f#\xff325\xfbkik\xf9\xb9\xb7\xb7\xf9\xd0\xce\xcd\xff\xd2\xd1\xcf\xff\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd3\xd2\xd0\xff\xd3\xd2\xd0\xff\xd4\xd2\xd0\xff\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd4\xd1\xd0\xff\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd3\xd2\xd0\xff\xd3\xd1\xd0\xff\xd2\xd0\xcf\xff\xcd\xcb\xca\xfd\x94\x93\x93\xf7ONQ\xf9$#'\xfd \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1f\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e#\xff \x1e#\xff \x1e\"\x9f \x1e\"\\ \x1e\"\xf5 \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff&$(\xfdTSU\xf9\xab\xa9\xaa\xf9\xce\xcc\xcb\xfd\xd3\xd1\xd1\xff\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd3\xd1\xcf\xff\xd1\xd0\xce\xff\xce\xcd\xcb\xfd\xcc\xca\xc9\xff\xcb\xc9\xc8\xfd\xcb\xc9\xc8\xfd\xcc\xca\xc9\xff\xce\xcc\xca\xff\xd1\xcf\xcd\xfd\xd2\xd0\xcf\xff\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd2\xd0\xd0\xff\xc3\xc1\xc1\xfb\x86\x84\x86\xf9759\xfb!\x1f#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1f\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1f\"\xff \x1e\"\xff \x1e\"\xd7 \x1e\"\x83 \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xff426\xfb\x8a\x88\x89\xf9\xce\xcb\xca\xfd\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd4\xd1\xd0\xff\xd3\xd1\xd0\xff\xd0\xcf\xce\xfd\xbc\xba\xba\xfb\x97\x95\x96\xf9zyz\xf9_]_\xf5ONQ\xfbCBD\xf7@?A\xf5HGJ\xf9VTW\xf9kjl\xf7\x86\x85\x86\xf9\xaa\xa8\xa8\xf9\xc8\xc6\xc5\xfb\xd3\xd1\xd1\xff\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xb9\xb7\xb6\xf9^]_\xf9\"!$\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xfb \x1e\"\x97 \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff! $\xffB@D\xf9\xab\xa9\xa9\xf9\xd0\xce\xcd\xff\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd3\xd0\xcf\xff\xc4\xc2\xc1\xfd\x9c\x9b\x9c\xf9ZY[\xf787:\xfd'&*\xfd \x1f#\xfd \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1f\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff#!%\xfd.-0\xfdCBE\xfbyxy\xf7\xb2\xb0\xb0\xfb\xcd\xcb\xca\xfd\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd2\xd1\xd0\xff\xc8\xc7\xc6\xfdwuw\xf9,+.\xfd \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\x9f \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xffLKN\xf9\xb5\xb3\xb3\xf9\xd3\xd1\xd0\xff\xd3\xd2\xd0\xff\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd0\xce\xcd\xff\x97\x95\x96\xf7NLO\xf9$#'\xfd \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff214\xfbjhj\xf7\xbe\xbc\xbb\xfb\xd2\xd1\xcf\xff\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xce\xcc\xcb\xfd\x8c\x8a\x8c\xf7&%)\xfd \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xa3 \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff! $\xffKJL\xfb\xc1\xbf\xbf\xfb\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd3\xd2\xd0\xff\xd3\xd0\xcf\xff\xb0\xae\xae\xfb\\Z]\xf7$#'\xfd \x1f#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1f#\xff426\xfb\x84\x82\x84\xf9\xca\xc7\xc7\xfd\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd0\xcf\xcd\xff\x8f\x8d\x8e\xf7-,/\xfd \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xa3 \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff?>A\xfb\xb3\xb1\xb1\xf9\xd3\xd1\xcf\xff\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd1\xcf\xce\xff\xa2\xa0\xa1\xf9=;?\xfb!\x1f#\xff \x1e#\xff \x1e#\xff \x1f#\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xff&%)\xfdhfh\xf9\xc2\xc0\xc0\xfd\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xce\xcc\xcb\xfd\u007f}\u007f\xf7#\"&\xfd \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xa3 \x1e\"\xff \x1f#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xff1/3\xfb\xa7\xa5\xa5\xf9\xd3\xd2\xd0\xff\xd3\xd2\xd0\xff\xd4\xd2\xd0\xff\xd0\xcf\xce\xff\x8c\x8a\x8b\xf9+*-\xfb \x1e#\xff \x1e\"\xff \x1e\"\xff \x1f#\xff \x1f\"\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1f\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e#\xff \x1f\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e#\xff \x1f#\xffMLO\xf7\xb9\xb8\xb7\xfb\xd3\xd1\xd0\xff\xd4\xd1\xd0\xff\xd4\xd1\xd0\xff\xcb\xc9\xc8\xfdjij\xf9\" $\xff \x1e\"\xff \x1f#\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e#\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xa3 \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e#\xff \x1f#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff$#'\xfd\x82\x81\x82\xf9\xd0\xce\xcc\xfd\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd1\xcf\xce\xff\x8d\x8c\x8c\xf9/-1\xfb \x1e#\xff \x1e#\xff \x1e\"\xff \x1f\"\xff \x1e\"\xff \x1f\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e#\xff \x1e#\xff \x1e\"\xff \x1e#\xff\" $\xffJIL\xf7\xc0\xbe\xbd\xfb\xd3\xd1\xd0\xff\xd4\xd1\xd0\xff\xd3\xd1\xd0\xff\xc2\xc0\xbf\xfb@?B\xf9 \x1e#\xff \x1e#\xff \x1e\"\xff \x1f\"\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xa3 \x1e\"\xff \x1e#\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1f\"\xff \x1e\"\xff \x1e#\xff \x1e#\xffKJL\xf9\xca\xc9\xc8\xfd\xd3\xd2\xd0\xff\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xa6\xa4\xa5\xf9,+/\xfb \x1e\"\xff \x1e#\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff\"!$\xfdVUW\xf5a_b\xf7-+0\xf9#\"&\xfdPNQ\xf7_]_\xf5315\xfb \x1e#\xffHFI\xf9XWY\xf7/-2\xfb \x1e\"\xffBAD\xf7VUX\xf5325\xf9 \x1e\"\xff \x1e#\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xff`^`\xf7\xc6\xc4\xc4\xfd\xd4\xd2\xd0\xff\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\x97\x96\x96\xf9*)-\xfd \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xa3 \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1f\"\xff \x1e\"\xff \x1e\"\xff-,0\xfb\xa2\xa0\xa1\xf9\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd4\xd1\xd0\xff\xb6\xb4\xb4\xfbA@C\xf9 \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1f#\xff%$(\xfb\xb5\xb3\xb3\xf3\xcd\xcb\xcb\xfdFEH\xf3*)-\xfd\xa2\xa0\xa1\xf7\xc8\xc6\xc5\xfbUSV\xfb \x1e\"\xff\x9c\x9b\x9b\xff\xce\xcc\xcb\xfdQPR\xfd \x1f\"\xff\x8e\x8d\x8e\xf5\xc9\xc7\xc6\xfd^]_\xf5 \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e#\xff#\"&\xfdutu\xf7\xd2\xcf\xce\xff\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xcb\xca\xc9\xfdcbd\xf9 \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e#\xff \x1e#\xff \x1e#\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xa3 \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e#\xff \x1e\"\xff \x1e\"\xff\\[]\xf9\xca\xc8\xc8\xfd\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd2\xcf\xce\xfffdf\xf7! $\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e\"\xff#\"&\xfd\x8f\x8d\x8e\U000e2861\xf9;:>\xf5'&*\xfd\x80\u007f\x80\xf5\x9e\x9c\x9d\xf7GEH\xfb \x1e\"\xffywy\xfb\x9d\x9b\x9b\xf9BAD\xfb \x1e\"\xffnln\xf5\x99\x97\x97\xf7LJM\xf5 \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff-+/\xfb\xae\xac\xac\xf9\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xaf\xad\xac\xf9%$(\xfd \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xa3 \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff\" $\xff\xab\xaa\xaa\xf7\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xa4\xa2\xa3\xf9%$(\xfd \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e#\xffUTV\xf9\xc7\xc6\xc5\xfd\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd0\xce\xcd\xff[Z\\\xf7 \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xa3 \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xffDCF\xf9\xcd\xcb\xca\xfd\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xc9\xc7\xc6\xfd[Y\\\xf9 \x1f#\xff! $\xff! $\xff \x1f\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1f\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e#\xfd \x1e\"\xff'&*\xfd\x9d\x9c\x9c\xf9\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\x97\x95\x95\xf9('+\xfd \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1f\"\xa3 \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1f#\xff\"!%\xfd~|~\xf7\xd2\xd0\xcf\xff\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xab\xaa\xa9\xfb)(,\xfb \x1e\"\xffIHK\xf9onp\xf71/3\xfb \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1f\"\xff \x1e\"\xff \x1e\"\xff \x1f\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1f\"\xff \x1f\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e$\xff\"\x1e@\xf9%\x1ea\xf9 \x1e)\xfd \x1e\"\xffXVX\xf7\xd0\xcf\xce\xfd\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xc0\xbf\xbe\xfb?=@\xfb \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1f\"\xa3 \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1f\"\xff/.1\xfd\xa8\xa6\xa6\xfb\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd3\xd1\xd0\xffpnp\xf7 \x1e\"\xff('+\xfd\x99\x98\x99\xf9\xd0\xce\xcd\xff\xaf\xad\xad\xf9;:=\xf9 \x1e\"\xff \x1f\"\xff \x1f\"\xff \x1f\"\xff \x1f\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1f\"\xff \x1e\"\xff \x1f\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff%\x1ec\xf7,\x1e\xb2\xfd,\x1d\xb2\xfb#\x1eK\xfb \x1f\"\xff204\xfd\xb1\xaf\xaf\xf9\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd2\xd0\xcf\xffdce\xf9 \x1f\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xa3 \x1e\"\xff \x1e#\xff \x1f#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff?>A\xfb\xc5\xc3\xc2\xf9\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xc9\xc7\xc6\xfbCBE\xf9 \x1e\"\xffCBE\xfb\xc0\xbe\xbe\xfb\xd3\xd1\xd0\xff\xaf\xad\xad\xf9+*-\xfb \x1e#\xff \x1e\"\xff \x1e\"\xff \x1f\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1f\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1f\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff#\x1eQ\xf7-\x1d\xbc\xfd-\x1d\xbe\xff'\x1dx\xf7 \x1e\"\xff$#&\xfd\x89\x87\x89\xf9\xd3\xd0\xd0\xff\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\x91\x8f\x90\xf5 \x1e\"\xff \x1f\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xa3 \x1e\"\xff \x1e#\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xffYWZ\xf7\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xab\xaa\xa9\xf9/-1\xfd \x1e\"\xffono\xf7\xd1\xd0\xce\xfd\xd3\xd1\xd0\xffnln\xf7 \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1f\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff!\x1e0\xfd*\x1d\x9b\xf9-\x1d\xbe\xff+\x1d\xa9\xfb \x1e(\xfb \x1e\"\xff_]_\xf9\xcf\xcd\xcc\xff\xd3\xd1\xd1\xff\xd4\xd1\xd0\xff\xb3\xb2\xb1\xfb%$(\xfb \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1f\"\xff \x1e\"\xff \x1e\"\xa3 \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xffvtv\xf9\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\x91\x8f\x90\xf9%$(\xfd \x1e\"\xffcad\xf5\xa8\xa7\xa7\xf9\xb7\xb5\xb5\xf9CBE\xfb \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff# \"\xfd<.\x1e\xf7I5\x1d\xed.& \xfb \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e%\xfd&\x1ds\xf7*\x1e\x9f\xf9(\x1e\x81\xf5 \x1e+\xf9 \x1e\"\xff?=@\xf7\xca\xc8\xc8\xfd\xd3\xd1\xd0\xff\xd4\xd1\xd0\xff\xbf\xbd\xbc\xfd758\xfb \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xa3 \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff\x8f\x8d\x8f\xf3\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd2\xcf\xcf\xff|{|\xfb \x1e\"\xfd \x1f\"\xff,+.\xfb)(+\xf90/2\xfb#\"&\xff \x1f\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xffY>\x1a\xf9\xafm\x10\xfd\xbas\x0e\xff\x92]\x13\xf9.& \xfb \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e*\xfd \x1e(\xf9 \x1e(\xf9 \x1e(\xfd \x1e\"\xff'&)\xf9\xc6\xc4\xc3\xff\xd3\xd1\xd0\xff\xd3\xd1\xd1\xff\xc6\xc3\xc3\xfdHFI\xf7 \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xa3 \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff\x9f\x9d\x9e\xf5\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd0\xce\xcd\xfdjij\xf5 \x1e\"\xff('*\xfd\xb6\xb4\xb4\xf9\xb2\xb1\xb1\xf9yxy\xf7&%(\xfd \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff*$!\xfb\xa1f\x11\xfb\xbdz\x1c\xff\xbf\x81*\xff\xb8t\x13\xfdeE\x19\xf9 \x1f\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e=\xfb\"\x1c\xb2\xfb\"\x1c\xc7\xf7!\x1dw\xf7 \x1e\"\xff\"!%\xfd\xbb\xb9\xb9\xf9\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xca\xc7\xc7\xfdTRU\xf7 \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1f#\xa3 \x1e\"\xff \x1e\"\xff \x1f#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff\xa4\xa2\xa3\xfb\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xcf\xcd\xcc\xfda_b\xf3 \x1e\"\xff204\xf7\xcb\xc9\xc8\xff\xd2\xd1\xd0\xff\x95\x93\x94\xf5&%)\xfb \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e\"\xffC2\x1e\xfb\xb3s\x18\xfdȧy\xff\xcf¯\xff\xc1\x8a<\xff\x87W\x15\xfb&\"!\xfd \x1e\"\xff \x1f#\xff \x1e\"\xff \x1f#\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1d?\xf7#\x1b\xe3\xff#\x1b\xec\xff!\x1d\x90\xfd \x1e\"\xff!\x1f$\xfd\xb2\xb0\xb0\xf3\xd3\xd1\xd0\xff\xd3\xd2\xd0\xff\xcb\xc9\xc8\xfdYXZ\xf9 \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1f\"\xa3 \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff\xa4\xa2\xa2\xfd\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xcf\xcd\xcc\xfd`^a\xf3 \x1e\"\xff437\xf5\xcb\xc9\xc8\xff\xd3\xd1\xd0\xff\x92\x91\x92\xf5%$(\xfb \x1e#\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1f\"\xff \x1f#\xff \x1e#\xff \x1e#\xffH4\x1d\xf9\xb4t\x1a\xfdʭ\x84\xff\xd1ȼ\xff\xc1\x8eC\xff\x8bZ\x14\xfb'\"!\xfd \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1f#\xff \x1e\"\xff \x1f\"\xff \x1f\"\xff \x1f\"\xff \x1e9\xf5#\x1b\xe4\xfd#\x1b\xec\xff!\x1d\x93\xfd \x1e\"\xfd!\x1f$\xfd\xb1\xaf\xaf\xf3\xd3\xd1\xd0\xff\xd3\xd2\xd0\xff\xcb\xc9\xc8\xfdYXZ\xf9 \x1e#\xff \x1e#\xff \x1e#\xff \x1e#\xff \x1e#\xff \x1e#\xff \x1e#\xff \x1e\"\xa3 \x1e\"\xff \x1e#\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e\"\xff\xa0\x9f\x9f\xf7\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd0\xce\xcd\xfdigi\xf5 \x1e\"\xff-,0\xfb\xc9\xc7\xc6\xfd\xce\xcc\xcc\xfd\x92\x90\x91\xf7'%)\xfd \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e#\xff \x1e\"\xff5* \xf7\xafn\x11\xfd\xbe~\"\xff\xc0\x862\xff\xbcx\x15\xffzP\x17\xf7\"\x1f\"\xfd \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1eC\xf9#\x1b\xdb\xfd#\x1c\xe6\xfd!\x1d\x8b\xfd \x1e\"\xff\"!%\xfd\xba\xb8\xb8\xf7\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xca\xc8\xc7\xfdTSV\xf7 \x1e#\xff \x1e\"\xff \x1e#\xff \x1e#\xff \x1e#\xff \x1e#\xff \x1e#\xff \x1e#\xa3 \x1e#\xff \x1e#\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e#\xff\x93\x91\x92\xf3\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd2\xd0\xcf\xffzxz\xfb \x1e#\xff#!&\xffomo\xf7dbe\xf7BAD\xfb\"!%\xff \x1e\"\xff \x1e#\xff \x1e#\xff \x1e#\xff \x1f#\xff \x1e#\xff \x1e#\xff \x1e#\xff \x1e#\xff \x1e\"\xff(#!\xfb\xa6i\x11\xfb\xbct\x0e\xff\xbbt\x0e\xff\xb9s\x0f\xfdhF\x19\xf9 \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e#\xff \x1e#\xff \x1e#\xff \x1f#\xff \x1e#\xff \x1e#\xff \x1e,\xfd \x1d[\xfb!\x1dm\xf5 \x1eL\xf9 \x1e\"\xff&%)\xfb\xc5\xc4\xc3\xfd\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xc6\xc4\xc4\xfdIGJ\xf7 \x1e#\xff \x1e#\xff \x1e#\xff \x1e#\xff \x1e#\xff \x1e#\xff \x1e#\xff \x1e#\xa3 \x1e#\xff \x1e#\xff \x1e\"\xff \x1f\"\xff \x1e\"\xff \x1e\"\xff \x1f#\xffywy\xf9\xd3\xd1\xd0\xff\xd4\xd1\xd0\xff\xd3\xd1\xd0\xff\x8e\x8c\x8e\xf9$#'\xfd \x1f\"\xff547\xfbRQT\xf9pnp\xf70/3\xfd \x1e#\xff \x1e#\xff \x1e#\xff \x1f#\xff \x1f#\xff \x1e#\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff!\x1f\"\xfd\x96`\x13\xf9\xbbt\x0f\xff\xbbu\x0f\xff\xb5q\x0f\xfdT;\x1b\xf9 \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e#\xff \x1f\"\xff \x1e\"\xff \x1e#\xff%'W\xf9')f\xf7#$I\xfb \x1f&\xfd \x1e\"\xff;:=\xf7\xca\xc8\xc7\xfd\xd4\xd1\xd0\xff\xd3\xd1\xd1\xff\xbf\xbd\xbd\xfd87:\xfb \x1e\"\xff \x1e#\xff \x1f\"\xff \x1e\"\xff \x1e#\xff \x1e#\xff \x1e#\xff \x1f#\xa3 \x1e#\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1f#\xff][^\xf7\xd3\xd1\xd0\xff\xd3\xd2\xd0\xff\xd3\xd1\xd0\xff\xa8\xa6\xa6\xf9-,0\xfd \x1e\"\xff{z{\xf5\xd1\xcf\xce\xfd\xd1\xcf\xce\xfdTSU\xf9 \x1f#\xff \x1e#\xff \x1e#\xff \x1e#\xff \x1f#\xff \x1e#\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e#\xff\x83U\x15\xf7\xbbt\x0e\xff\xbbt\x0f\xff\xb1n\x0f\xfdB1\x1d\xf7 \x1e\"\xff \x1f\"\xff \x1e\"\xff \x1e\"\xff \x1f\"\xff \x1e\"\xff \x1e#\xff \x1e#\xff \x1e#\xff \x1f#\xff  +\xfd-4\xa9\xf95?\xed\xff2;\xd3\xf9! 0\xfb \x1e\"\xffZY[\xf9\xce\xcc\xcb\xff\xd3\xd1\xd0\xff\xd3\xd1\xd1\xff\xb5\xb3\xb3\xfb'&)\xfb \x1e\"\xff \x1e#\xff \x1e\"\xff \x1f\"\xff \x1e#\xff \x1e#\xff \x1f#\xff \x1e\"\xa3 \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xffA@C\xfb\xc8\xc6\xc5\xfb\xd3\xd2\xd0\xff\xd3\xd1\xd0\xff\xc6\xc5\xc4\xfb@>A\xfb \x1e\"\xffVUW\xf9\xcb\xc9\xc9\xfd\xd3\xd1\xd0\xff\x93\x91\x92\xf7!\x1f$\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xffjG\x18\xf7\xbat\x0e\xff\xbbt\x0e\xff\xabk\x10\xfd0' \xfb \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff#$D\xfb3<\xdb\xfb5?\xee\xff/6\xb5\xf9 \x1e#\xfd#!%\xfd\x85\x83\x84\xf7\xd2\xd0\xcf\xff\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\x96\x94\x95\xf5 \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xa3 \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1f\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff103\xfd\xad\xaa\xaa\xf9\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd2\xd0\xcf\xffigi\xf7 \x1e\"\xff547\xfb\xb1\xaf\xaf\xfb\xd3\xd1\xd0\xff\xba\xb8\xb7\xfb98;\xfb \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xffT;\x1b\xf7\xb9t\x0e\xff\xbbu\x0e\xff\xa1f\x11\xf9$!\"\xf9 \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1f#\xff \x1e#\xff \x1e\"\xff \x1e\"\xff),{\xf75?\xec\xff5?\xeb\xff(+u\xf7 \x1e\"\xff0.2\xfd\xac\xab\xaa\xf9\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd2\xd0\xcf\xffihj\xf7 \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xa3 \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff#\"&\xfd\x83\x82\x83\xf7\xd3\xd1\xcf\xff\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xa6\xa4\xa4\xf9&%)\xfb! #\xffvtv\xf7\xb5\xb3\xb3\xf9onp\xf9-,/\xfb \x1e\"\xff \x1e\"\xff \x1f#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1f\"\xff \x1f\"\xff \x1e#\xffD3\x1b\xfb\xbaw\x05\xfd\xc0{\x04\xff\x93a\r\xf9 \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1f#\xff \x1f#\xff \x1f#\xff \x1e#\xff \x1e#\xff \x1e#\xff#$G\xf9,1\x9b\xf907\xbc\xf7\"#>\xfb \x1e#\xffQOR\xf9\xcf\xcd\xcc\xfd\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xc4\xc2\xc1\xfbA@C\xfb \x1e#\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e\"\xa3 \x1e\"\xff \x1f#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xffKIL\xf9\xcf\xcd\xcc\xfd\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xc6\xc4\xc4\xfdTRU\xf9 \x1f#\xff+)-\xfd658\xfbA@C\xf9\x8b\x89\x8a\xf7MLO\xf9 \x1f#\xff \x1e\"\xff \x1e\"\xff \x1f#\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1f#\xff \x1f#\xff;/\x1d\xfb\xb5y\x04\xf9ʆ\x00\xff\x80Y\x0e\xf7 \x1e\"\xff \x1e\"\xff \x1f\"\xff \x1f\"\xff \x1e\"\xff \x1f#\xff \x1e\"\xff \x1e#\xff \x1e#\xff !*\xfd$;\x88\xf7\"1g\xf9 \"3\xfb!!8\xfb \x1f%\xff%#(\xfd\x96\x95\x95\xf9\xd3\xd2\xd0\xff\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\x9c\x9a\x9b\xf9*)-\xfd \x1e#\xff \x1e#\xff \x1e\"\xff \x1f#\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e#\xff \x1f#\xa3 \x1e\"\xff \x1e#\xff \x1f#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff#\"&\xfd\xb3\xb1\xb1\xf9\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd2\xd1\xcf\xff\x9b\x99\x9a\xf7$#'\xff \x1e#\xffA@C\xf9\xb1\xb0\xb0\xf9\xd3\xd1\xd0\xff\xae\xac\xac\xf9:9<\xfb \x1e#\xff \x1e#\xff \x1f#\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e#\xff \x1f#\xff2*\x1f\xfb\xafy\a\xfbԑ\x00\xffkN\x13\xf7 \x1e\"\xff \x1e\"\xff \x1f\"\xff \x1e\"\xff \x1f#\xff \x1f#\xff \x1e\"\xff \x1e#\xff \x1e#\xff#4p\xf9)W\xea\xfd)U\xe6\xfd$9\x84\xf5 \x1f%\xff \x1f#\xffMKN\xf9\xc5\xc3\xc2\xfd\xd3\xd2\xd1\xff\xd3\xd1\xd0\xff\xd0\xcf\xcd\xffcbd\xf7 \x1f#\xff \x1f#\xff \x1e#\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e#\xff \x1e#\xa3 \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xffdbd\xf9\xcd\xcb\xca\xfd\xd3\xd2\xd0\xff\xd3\xd1\xd0\xff\xd1\xcf\xcd\xff[Z\\\xf7!\x1f#\xff('+\xfd\x95\x93\x94\xf9\xd3\xd1\xd0\xff\xd2\xd0\xcf\xff\xac\xab\xab\xf9/.2\xfb \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff(# \xfd\xa4v\n\xf9ܛ\x00\xfdUB\x18\xf9 \x1f#\xff \x1f#\xff \x1f#\xff \x1e\"\xff \x1e\"\xff \x1f#\xff \x1e\"\xff \x1e#\xff#3m\xf7)S\xe0\xfd*X\xf0\xff(R\xda\xfb\"-V\xf9 \x1f#\xff)(,\xfd\xa5\xa3\xa3\xf9\xd3\xd1\xd0\xff\xd3\xd2\xd1\xff\xd3\xd1\xd0\xff\xb5\xb3\xb3\xfb('*\xfd \x1e\"\xff \x1e#\xff \x1e#\xff \x1e#\xff \x1e#\xff \x1e#\xff \x1e#\xff \x1e#\xff \x1e\"\xff \x1f#\xa3 \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff103\xfb\xa9\xa7\xa8\xf9\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xaf\xad\xad\xfb;9<\xfb \x1e\"\xff=<?\xfb\xaf\xad\xad\xf9\xd2\xd0\xcf\xff\xb7\xb5\xb5\xf9326\xf9+*.\xfd! $\xff \x1e\"\xff \x1f\"\xff \x1e\"\xff \x1e\"\xff \x1f#\xff#!\"\xfd\x94n\x0e\xf7ٝ\x02\xf9H:\x1b\xfb \x1f\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff\x1f\x1e#\xff\x1f!(\xfd\x1f\")\xfd#6v\xf7)U\xe5\xfd)V\xe8\xfd$7|\xf9 \x1f%\xfd\"!$\xffihj\xf7\xd0\xce\xcd\xfd\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xce\xcc\xcb\xfdlkl\xf9 \x1f\"\xff \x1e\"\xff \x1e\"\xff \x1f\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1f\"\xa3 \x1e\"\xff \x1e\"\xff \x1f\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1f#\xff \x1e\"\xffTRT\xf9\xce\xcc\xcb\xfd\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd2\xd0\xcf\xff\x9b\x99\x9a\xf9('*\xfd \x1f#\xff?=@\xf9\x97\x96\x96\xf5GFH\xf9RQS\xf9\xae\xac\xac\xf7kik\xf9*),\xfd \x1f\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1f\"\xff|^\x12\xf9͖\x05\xfb<2\x1d\xfd \x1f\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff\x1f\x1f#\xff\x1f0C\xf9\x1ee\xa3\xf7\x1ee\xa3\xf7 \"+\xfb#7{\xf7#8|\xf7  (\xfd \x1e#\xffTSU\xf9\xc1\xc0\xbf\xfd\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xa0\x9f\x9f\xf9.,0\xfd \x1e#\xff \x1e\"\xff \x1f\"\xff \x1f\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1f\"\xff \x1f\"\xff \x1f\"\xff \x1e\"\xa3 \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff&$(\xfd\x8d\x8b\x8c\xf9\xd1\xce\xcd\xff\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xcf\xcd\xcc\xff\x81\u007f\x80\xf9*)-\xfd \x1e\"\xff*)-\xfd-,/\xfb\xb3\xb1\xb1\xf9\xd2\xd0\xcf\xff\xcc\xcb\xc9\xfd\xa5\xa4\xa4\xf9NMP\xf7\"!%\xff$#&\xfd \x1e\"\xff \x1e\"\xff\\H\x18\xf5\xbb\x89\b\xf90)\x1f\xfb \x1e\"\xff \x1f#\xff#\"&\xfd\x1f#+\xfb\x1eS\x82\xf7\x1d\x83\xd9\xfb\x1d\x92\xf4\xff\x1d\x90\xf1\xfd\x1eFj\xf7\x1f (\xfd \x1f(\xfd! $\xffA?B\xf9\xb9\xb7\xb7\xfb\xd3\xd1\xcf\xff\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xc7\xc5\xc4\xfbHGJ\xf9 \x1f#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1f\"\xff \x1e\"\xa3 \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff759\xfb\xb0\xae\xae\xf9\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd3\xd2\xd0\xff\xcd\xcc\xca\xfd~}}\xf9&%(\xfd \x1e\"\xff+)-\xfd\x8b\x8a\x8b\xf7\xcb\xca\xc9\xfd\xd3\xd2\xd0\xff\xcf\xcd\xcc\xfdjij\xf7KJM\xfb\x89\x87\x88\xf7mkm\xf7QPR\xf9TH-\xf3\xa7}\r\xf7C?<\xf7UTV\xf9usu\xf9vuv\xf7!'1\xfb\x1ev\xc2\xf9\x1d\x93\xf6\xff\x1d\x92\xf4\xff\x1e}\xce\xf9\x1e9S\xf9\x1f\x1e#\xff \x1e\"\xffBAD\xf9\xb1\xaf\xaf\xfb\xd3\xd1\xcf\xff\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xcd\xcc\xca\xfdwuw\xf7\"!%\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1f\"\xff \x1e\"\xa3 \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xffHFI\xf9\xbb\xb9\xb9\xfb\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd3\xd2\xd0\xff\xcf\xcd\xcc\xfd\x94\x92\x93\xf7437\xfb \x1e#\xff#!%\xffLKN\xf9\x9c\x9a\x9b\xf9\xa9\xa7\xa7\xf9869\xfb\x88\x87\x88\xf9\xd2\xd0\xcf\xff\xd0\xcf\xcd\xff\xce\xcc\xcb\xfd\x83\u007f|\xf1\x9d{%\xf5\xb0\xae\xae\xfb\xce\xcd\xcc\xff\xd1\xcf\xce\xff\xcd\xcb\xca\xfd.-1\xf9\x1eIp\xf7\x1e}\xce\xfb\x1eQ~\xf7\x1f&1\xfd\x1f\x1e#\xff#\"&\xfdYXZ\xf9\xbb\xb9\xb9\xfb\xd3\xd0\xd0\xff\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd0\xcf\xce\xfd\x8c\x8a\x8b\xf7&%)\xfd \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xa3 \x1e\"\xff \x1e#\xff \x1e\"\xff \x1f\"\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff\"!%\xffWVX\xf7\xc7\xc5\xc4\xfd\xd3\xd1\xd0\xff\xd3\xd2\xd0\xff\xd3\xd2\xd0\xff\xd2\xd0\xcf\xff\xa4\xa3\xa3\xf9LJM\xf7\"!%\xff \x1e\"\xff*),\xfd<;>\xfb#\"&\xfd\xa8\xa6\xa7\xf3\xcd\xcb\xca\xfd\xd0\xce\xcd\xff\xd2\xd0\xce\xff\x83\x82\x83\xfdn]4縶\xb6\xfb\xd1\xcf\xce\xff\xcd\xcb\xcb\xff\xc7\xc5\xc4\xfdHGI\xf3\x1f$-\xfd\x1f-<\xfb\x1f\x1f$\xff \x1f#\xff-,/\xfbtrt\xf7\xc4\xc2\xc2\xfd\xd3\xd1\xd0\xff\xd4\xd1\xd0\xff\xd4\xd2\xd0\xff\xd1\xd0\xcf\xff\x9c\x9a\x9b\xf9325\xfb \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1f#\x9f \x1f#\xff \x1f#\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1f#\xff \x1e#\xff \x1e#\xff \x1f#\xff \x1f#\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e#\xffZY[\xf7\xbe\xbc\xbc\xfb\xd4\xd2\xd0\xff\xd3\xd2\xd0\xff\xd3\xd2\xd0\xff\xd3\xd1\xd0\xff\xcc\xca\xc9\xfd\x85\x83\x85\xf7A?B\xf9 \x1f#\xfd \x1e\"\xff \x1e\"\xff'&*\xfbDBE\xf7dce\xf7ywx\xfbRQS\xfd/-.\xf5kik\xfdhfh\xf7MKN\xf9-,0\xf9 \x1f#\xff \x1e\"\xff \x1e\"\xff)(,\xfbZY[\xf9\xb2\xb0\xaf\xf9\xd2\xcf\xcf\xff\xd4\xd1\xd0\xff\xd3\xd1\xd0\xff\xd4\xd1\xd0\xff\xd1\xcf\xce\xfd\x9a\x98\x99\xf9,+/\xfb \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1f#\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\x97 \x1e#\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1f#\xff \x1e#\xff#\"%\xffMLN\xf9\xb7\xb5\xb4\xf9\xd2\xd0\xce\xff\xd3\xd2\xd0\xff\xd4\xd1\xd0\xff\xd3\xd1\xd0\xff\xd1\xcf\xce\xff\xbd\xbb\xba\xfd\x8b\x8a\x8b\xf7KIL\xf90/2\xfb#\"&\xfd \x1e\"\xff \x1e#\xff \x1f#\xff \x1f#\xff \x1e#\xff \x1e#\xff \x1e#\xff \x1e#\xff \x1f#\xfd)(+\xfd97;\xfbfdg\xf7\xa7\xa5\xa5\xf9\xc9\xc8\xc7\xfd\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd4\xd1\xd0\xff\xd3\xd1\xd0\xff\xcc\xca\xc9\xfd\x86\x84\x85\xf7104\xfd \x1e#\xff \x1e\"\xff \x1e#\xff \x1e#\xff \x1e#\xff \x1f#\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e#\xff \x1e#\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\x83 \x1f#\xff \x1f#\xff \x1e\"\xff \x1e#\xff \x1f#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1f\"\xff \x1f\"\xff \x1e\"\xff \x1f#\xff \x1f#\xff \x1f#\xff \x1f#\xff \x1f#\xff=<?\xfb\x9a\x98\x99\xf7\xd1\xcf\xce\xfd\xd3\xd2\xd0\xff\xd3\xd2\xd0\xff\xd4\xd2\xd0\xff\xd4\xd2\xd0\xff\xd4\xd2\xd1\xff\xcc\xca\xc9\xfd\xaf\xae\xae\xf9\x88\x86\x87\xf9igi\xf7OMP\xf998;\xf50/3\xf5.-1\xf7325\xf5BAD\xf7YX[\xf9vtv\xf9\x9b\x99\x9a\xf9\xbe\xbc\xbb\xfb\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd4\xd2\xd0\xff\xd4\xd2\xd1\xff\xd3\xd1\xd1\xff\xd4\xd1\xd0\xff\xc2\xc0\xc0\xfbnln\xf9%#'\xfd \x1e#\xff \x1e#\xff \x1e\"\xff \x1e#\xff \x1e#\xff \x1f#\xff \x1f#\xff \x1e\"\xff \x1e\"\xff \x1f#\xff \x1f#\xff \x1e#\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xfb \x1e\"\\ \x1e\"\xf5 \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xff)(,\xfdedf\xf7\xb6\xb4\xb4\xfb\xd1\xcf\xce\xfd\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd3\xd0\xd0\xff\xd0\xce\xcd\xfd\xcc\xca\xc9\xff\xc9\xc7\xc7\xfd\xc8\xc6\xc6\xfd\xc8\xc6\xc5\xfd\xc9\xc7\xc6\xfd\xcb\xc9\xc7\xfd\xcd\xcc\xcb\xff\xd1\xcf\xce\xff\xd3\xd1\xcf\xff\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xca\xc8\xc7\xfd\x96\x94\x95\xf9@?B\xf9\" $\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1f#\xff \x1e#\xff \x1e#\xff \x1e\"\xff \x1e\"\xd7 \x1e\"4 \x1e\"\xe1 \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1f#\xff=<?\xfb|{|\xf7\xc5\xc3\xc2\xfb\xd1\xcf\xce\xff\xd2\xd1\xd0\xff\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd3\xd1\xcf\xff\xcf\xcd\xcc\xff\xa7\xa5\xa5\xf7]\\^\xf9('+\xfd \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\x9f \x1e#\b \x1e\"\xb1 \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff0.2\xfbihj\xf7\x9f\x9e\x9e\xf9\xc4\xc3\xc2\xfb\xd2\xd1\xcf\xfd\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd3\xd1\xd0\xff\xd3\xd2\xd0\xff\xd3\xd2\xd0\xff\xd3\xd2\xd0\xff\xd3\xd1\xd0\xff\xcf\xce\xcc\xfd\xb4\xb2\xb2\xfb\x89\x87\x88\xf9MKN\xf7\"!%\xfd \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e#\xef \x1e#N\x00\x00\x00\x00 \x1e\"T \x1e\"\xf9 \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1f\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff!\x1f#\xff+*.\xfd@?B\xfb_^`\xf7\x8b\x89\x8a\xf7\xa6\xa5\xa5\xf9\xb7\xb5\xb4\xf9\xbd\xbb\xbb\xfd\xbf\xbd\xbd\xff\xc0\xbf\xbe\xfd\xbe\xbd\xbc\xff\xbb\xb9\xb9\xf9\xb0\xae\xae\xfb\x9e\x9c\x9d\xf7utu\xf7ONQ\xf9547\xfd%$'\xfd \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e\"\xc1 \x1f#\x16\x00\x00\x00\x00 \x1e\"\x10 \x1f\"\xbb \x1e\"\xff \x1f\"\xff \x1f\"\xff \x1e\"\xff \x1e#\xff \x1e#\xff \x1f#\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1f\"\xff \x1f#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff! $\xfd+*.\xf9325\xfd97:\xfd;:<\xfb659\xfd0.2\xfb&%)\xfb \x1f#\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1f#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1f#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xf9 \x1e\"X \x1f\"\x00\x00\x00\x00\x00 \x1f#\x00 \x1e#@ \x1e#\xe5 \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e#\xff \x1e#\xff \x1e#\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e#\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e#\xff \x1e#\xff \x1f\"\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e#\xff \x1e#\xfd \x1e#\xa5 \x1e#\x0e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 \x1e#\x04 \x1e#x \x1e\"\xf9 \x1e\"\xff \x1e#\xff \x1e#\xff \x1e#\xff \x1e#\xff \x1e#\xff \x1e#\xff \x1e#\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e#\xff \x1f\"\xff \x1e#\xff \x1e#\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1f#\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e#\xff \x1e#\xff \x1e#\xff \x1e#\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e#\xd5 \x1e#( \x1e#\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 \x1f#\n \x1e\"z \x1e\"\xf9 \x1f#\xff \x1f\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1f#\xff \x1f#\xff \x1f#\xff \x1f\"\xff \x1f\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1f#\xff \x1e\"\xff \x1f#\xff \x1e\"\xff \x1e\"\xff \x1f\"\xff \x1f\"\xff \x1f#\xff \x1f\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1f\"\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1f\"\xff \x1f#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1f#\xff \x1e#\xff \x1e#\xff \x1f#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xd1 \x1e#6\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 \x1f#\n \x1e\"\x81 \x1e\"\xe9 \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xfb \x1e\"\xcd \x1e\"2 \x1e#\x02\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 \x1f#\x06 \x1e\"N \x1e\"\xcd \x1e\"\xfd \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e#\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xf3 \x1e\"\x91 \x1e# \x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 \x1e#\x02 \x1e\"\x1a \x1e\"p \x1e\"\xc9 \x1e\"\xf1 \x1e\"\xfd \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e#\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xff \x1e\"\xf9 \x1e\"\xdf \x1e\"\xa7 \x1e\"@ \x1e\"\b \x1f#\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00 \x1f#\x00 \x1e#\x16 \x1e\"P \x1e\"\x87 \x1e\"\xbb \x1f\"\xd3 \x1e#\xdf \x1e\"\xe1 \x1e\"\xe3 \x1e\"\xe3 \x1e\"\xe3 \x1e#\xe3 \x1e#\xe3 \x1e\"\xe3 \x1e#\xe3 \x1e#\xe3 \x1e\"\xe3 \x1e\"\xe3 \x1e\"\xe3 \x1e\"\xe3 \x1e\"\xe3 \x1e\"\xe3 \x1e#\xe3 \x1e\"\xe3 \x1e#\xe3 \x1e#\xe3 \x1e#\xe3 \x1e\"\xe3 \x1e\"\xe3 \x1e\"\xe3 \x1e\"\xe3 \x1e\"\xe3 \x1e#\xe3 \x1e#\xe3 \x1e#\xe3 \x1e\"\xe3 \x1e\"\xe3 \x1e\"\xe3 \x1e#\xe3 \x1e\"\xe3 \x1e\"\xe3 \x1e#\xe1 \x1e\"\xdb \x1e\"\xcb \x1e\"\xa3 \x1e\"n \x1e\"2 \x1e#\b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xe0\x00\x00\x00\x00\a\xff\xff\x80\x00\x00\x00\x00\x00\xff\xfe\x00\x00\x00\x00\x00\x00?\xf8\x00\x00\x00\x00\x00\x00\x1f\xf8\x00\x00\x00\x00\x00\x00\x0f\xf0\x00\x00\x00\x00\x00\x00\a\xe0\x00\x00\x00\x00\x00\x00\x03\xc0\x00\x00\x00\x00\x00\x00\x03\xc0\x00\x00\x00\x00\x00\x00\x01\x80\x00\x00\x00\x00\x00\x00\x01\x80\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x00\x80\x00\x00\x00\x00\x00\x00\x01\xc0\x00\x00\x00\x00\x00\x00\x01\xc0\x00\x00\x00\x00\x00\x00\x03\xe0\x00\x00\x00\x00\x00\x00\x03\xf0\x00\x00\x00\x00\x00\x00\a\xf8\x00\x00\x00\x00\x00\x00\x0f\xf8\x00\x00\x00\x00\x00\x00\x1f\xfe\x00\x00\x00\x00\x00\x00?\xff\x80\x00\x00\x00\x00\x00\xff\xff\xe0\x00\x00\x00\x00\a\xff"),
	}
	file3 := &embedded.EmbeddedFile{
		Filename:    "index.html",
		FileModTime: time.Unix(1571735454, 0),

		Content: string("<!DOCTYPE html>\n<html>\n\n<head>\n\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no, user-scalable=no\" />\n\t<meta charset=\"UTF-8\" />\n\t<link rel=\"shortcut icon\" href=\"favicon.ico\">\n\t<script type=\"text/javascript\" src=\"speedtest.js\"></script>\n\t<script type=\"text/javascript\">\n\t\tfunction I(i) { return document.getElementById(i); }\n\t\t//INITIALIZE SPEEDTEST\n\t\tvar s = new Speedtest(); //create speedtest object\n\n\t\tvar meterBk = /Trident.*rv:(\\d+\\.\\d+)/i.test(navigator.userAgent) ? \"#EAEAEA\" : \"#80808040\";\n\t\tvar dlColor = \"#6060AA\",\n\t\t\tulColor = \"#616161\";\n\t\tvar progColor = meterBk;\n\n\t\t//CODE FOR GAUGES\n\t\tfunction drawMeter(c, amount, bk, fg, progress, prog) {\n\t\t\tvar ctx = c.getContext(\"2d\");\n\t\t\tvar dp = window.devicePixelRatio || 1;\n\t\t\tvar cw = c.clientWidth * dp, ch = c.clientHeight * dp;\n\t\t\tvar sizScale = ch * 0.0055;\n\t\t\tif (c.width == cw && c.height == ch) {\n\t\t\t\tctx.clearRect(0, 0, cw, ch);\n\t\t\t} else {\n\t\t\t\tc.width = cw;\n\t\t\t\tc.height = ch;\n\t\t\t}\n\t\t\tctx.beginPath();\n\t\t\tctx.strokeStyle = bk;\n\t\t\tctx.lineWidth = 12 * sizScale;\n\t\t\tctx.arc(c.width / 2, c.height - 58 * sizScale, c.height / 1.8 - ctx.lineWidth, -Math.PI * 1.1, Math.PI * 0.1);\n\t\t\tctx.stroke();\n\t\t\tctx.beginPath();\n\t\t\tctx.strokeStyle = fg;\n\t\t\tctx.lineWidth = 12 * sizScale;\n\t\t\tctx.arc(c.width / 2, c.height - 58 * sizScale, c.height / 1.8 - ctx.lineWidth, -Math.PI * 1.1, amount * Math.PI * 1.2 - Math.PI * 1.1);\n\t\t\tctx.stroke();\n\t\t\tif (typeof progress !== \"undefined\") {\n\t\t\t\tctx.fillStyle = prog;\n\t\t\t\tctx.fillRect(c.width * 0.3, c.height - 16 * sizScale, c.width * 0.4 * progress, 4 * sizScale);\n\t\t\t}\n\t\t}\n\t\tfunction mbpsToAmount(s) {\n\t\t\treturn 1 - (1 / (Math.pow(1.3, Math.sqrt(s))));\n\t\t}\n\t\tfunction format(d) {\n\t\t\td = Number(d);\n\t\t\tif (d < 10) return d.toFixed(2);\n\t\t\tif (d < 100) return d.toFixed(1);\n\t\t\treturn d.toFixed(0);\n\t\t}\n\n\t\t//UI CODE\n\t\tvar uiData = null;\n\t\tfunction startStop() {\n\t\t\tif (s.getState() == 3) {\n\t\t\t\t//speedtest is running, abort\n\t\t\t\ts.abort();\n\t\t\t\tdata = null;\n\t\t\t\tI(\"startStopBtn\").className = \"\";\n\t\t\t\tinitUI();\n\t\t\t} else {\n\t\t\t\t//test is not running, begin\n\t\t\t\tI(\"startStopBtn\").className = \"running\";\n\t\t\t\ts.onupdate = function (data) {\n\t\t\t\t\tuiData = data;\n\t\t\t\t};\n\t\t\t\ts.onend = function (aborted) {\n\t\t\t\t\tI(\"startStopBtn\").className = \"\";\n\t\t\t\t\tupdateUI(true);\n\t\t\t\t};\n\t\t\t\ts.start();\n\t\t\t}\n\t\t}\n\t\t//this function reads the data sent back by the test and updates the UI\n\t\tfunction updateUI(forced) {\n\t\t\tif (!forced && s.getState() != 3) return;\n\t\t\tif (uiData == null) return;\n\t\t\tvar status = uiData.testState;\n\t\t\tI(\"ip\").textContent = uiData.clientIp;\n\t\t\tI(\"dlText\").textContent = (status == 1 && uiData.dlStatus == 0) ? \"...\" : format(uiData.dlStatus);\n\t\t\tdrawMeter(I(\"dlMeter\"), mbpsToAmount(Number(uiData.dlStatus * (status == 1 ? oscillate() : 1))), meterBk, dlColor, Number(uiData.dlProgress), progColor);\n\t\t\tI(\"ulText\").textContent = (status == 3 && uiData.ulStatus == 0) ? \"...\" : format(uiData.ulStatus);\n\t\t\tdrawMeter(I(\"ulMeter\"), mbpsToAmount(Number(uiData.ulStatus * (status == 3 ? oscillate() : 1))), meterBk, ulColor, Number(uiData.ulProgress), progColor);\n\t\t\tI(\"pingText\").textContent = format(uiData.pingStatus);\n\t\t\tI(\"jitText\").textContent = format(uiData.jitterStatus);\n\t\t}\n\t\tfunction oscillate() {\n\t\t\treturn 1 + 0.02 * Math.sin(Date.now() / 100);\n\t\t}\n\t\t//update the UI every frame\n\t\twindow.requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame || (function (callback, element) { setTimeout(callback, 1000 / 60); });\n\t\tfunction frame() {\n\t\t\trequestAnimationFrame(frame);\n\t\t\tupdateUI();\n\t\t}\n\t\tframe(); //start frame loop\n\t\t//function to (re)initialize UI\n\t\tfunction initUI() {\n\t\t\tdrawMeter(I(\"dlMeter\"), 0, meterBk, dlColor, 0);\n\t\t\tdrawMeter(I(\"ulMeter\"), 0, meterBk, ulColor, 0);\n\t\t\tI(\"dlText\").textContent = \"\";\n\t\t\tI(\"ulText\").textContent = \"\";\n\t\t\tI(\"pingText\").textContent = \"\";\n\t\t\tI(\"jitText\").textContent = \"\";\n\t\t\tI(\"ip\").textContent = \"\";\n\t\t}\n\t</script>\n\t<style type=\"text/css\">\n\t\thtml,\n\t\tbody {\n\t\t\tborder: none;\n\t\t\tpadding: 0;\n\t\t\tmargin: 0;\n\t\t\tbackground: #FFFFFF;\n\t\t\tcolor: #202020;\n\t\t}\n\n\t\tbody {\n\t\t\ttext-align: center;\n\t\t\tfont-family: \"Roboto\", sans-serif;\n\t\t}\n\n\t\th1 {\n\t\t\tcolor: #404040;\n\t\t}\n\n\t\t#startStopBtn {\n\t\t\tdisplay: inline-block;\n\t\t\tmargin: 0 auto;\n\t\t\tcolor: #6060AA;\n\t\t\tbackground-color: rgba(0, 0, 0, 0);\n\t\t\tborder: 0.15em solid #6060FF;\n\t\t\tborder-radius: 0.3em;\n\t\t\ttransition: all 0.3s;\n\t\t\tbox-sizing: border-box;\n\t\t\twidth: 8em;\n\t\t\theight: 3em;\n\t\t\tline-height: 2.7em;\n\t\t\tcursor: pointer;\n\t\t\tbox-shadow: 0 0 0 rgba(0, 0, 0, 0.1), inset 0 0 0 rgba(0, 0, 0, 0.1);\n\t\t}\n\n\t\t#startStopBtn:hover {\n\t\t\tbox-shadow: 0 0 2em rgba(0, 0, 0, 0.1), inset 0 0 1em rgba(0, 0, 0, 0.1);\n\t\t}\n\n\t\t#startStopBtn.running {\n\t\t\tbackground-color: #FF3030;\n\t\t\tborder-color: #FF6060;\n\t\t\tcolor: #FFFFFF;\n\t\t}\n\n\t\t#startStopBtn:before {\n\t\t\tcontent: \"Start\";\n\t\t}\n\n\t\t#startStopBtn.running:before {\n\t\t\tcontent: \"Abort\";\n\t\t}\n\n\t\t#test {\n\t\t\tmargin-top: 2em;\n\t\t\tmargin-bottom: 12em;\n\t\t}\n\n\t\tdiv.testArea {\n\t\t\tdisplay: inline-block;\n\t\t\twidth: 16em;\n\t\t\theight: 12.5em;\n\t\t\tposition: relative;\n\t\t\tbox-sizing: border-box;\n\t\t}\n\n\t\tdiv.testArea2 {\n\t\t\tdisplay: inline-block;\n\t\t\twidth: 14em;\n\t\t\theight: 7em;\n\t\t\tposition: relative;\n\t\t\tbox-sizing: border-box;\n\t\t\ttext-align: center;\n\t\t}\n\n\t\tdiv.testArea div.testName {\n\t\t\tposition: absolute;\n\t\t\ttop: 0.1em;\n\t\t\tleft: 0;\n\t\t\twidth: 100%;\n\t\t\tfont-size: 1.4em;\n\t\t\tz-index: 9;\n\t\t}\n\n\t\tdiv.testArea2 div.testName {\n\t\t\tdisplay: block;\n\t\t\ttext-align: center;\n\t\t\tfont-size: 1.4em;\n\t\t}\n\n\t\tdiv.testArea div.meterText {\n\t\t\tposition: absolute;\n\t\t\tbottom: 1.55em;\n\t\t\tleft: 0;\n\t\t\twidth: 100%;\n\t\t\tfont-size: 2.5em;\n\t\t\tz-index: 9;\n\t\t}\n\n\t\tdiv.testArea2 div.meterText {\n\t\t\tdisplay: inline-block;\n\t\t\tfont-size: 2.5em;\n\t\t}\n\n\t\tdiv.meterText:empty:before {\n\t\t\tcontent: \"0.00\";\n\t\t}\n\n\t\tdiv.testArea div.unit {\n\t\t\tposition: absolute;\n\t\t\tbottom: 2em;\n\t\t\tleft: 0;\n\t\t\twidth: 100%;\n\t\t\tz-index: 9;\n\t\t}\n\n\t\tdiv.testArea2 div.unit {\n\t\t\tdisplay: inline-block;\n\t\t}\n\n\t\tdiv.testArea canvas {\n\t\t\tposition: absolute;\n\t\t\ttop: 0;\n\t\t\tleft: 0;\n\t\t\twidth: 100%;\n\t\t\theight: 100%;\n\t\t\tz-index: 1;\n\t\t}\n\n\t\tdiv.testGroup {\n\t\t\tdisplay: block;\n\t\t\tmargin: 0 auto;\n\t\t}\n\n\t\t@media all and (max-width:40em) {\n\t\t\tbody {\n\t\t\t\tfont-size: 0.8em;\n\t\t\t}\n\t\t}\n\t</style>\n\t<title>LibreSpeed Example</title>\n</head>\n\n<body>\n\t<h1>LibreSpeed Example</h1>\n\t<div id=\"testWrapper\">\n\t\t<div id=\"startStopBtn\" onclick=\"startStop()\"></div>\n\t\t<div id=\"test\">\n\t\t\t<div class=\"testGroup\">\n\t\t\t\t<div class=\"testArea2\">\n\t\t\t\t\t<div class=\"testName\">Ping</div>\n\t\t\t\t\t<div id=\"pingText\" class=\"meterText\" style=\"color:#AA6060\"></div>\n\t\t\t\t\t<div class=\"unit\">ms</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"testArea2\">\n\t\t\t\t\t<div class=\"testName\">Jitter</div>\n\t\t\t\t\t<div id=\"jitText\" class=\"meterText\" style=\"color:#AA6060\"></div>\n\t\t\t\t\t<div class=\"unit\">ms</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div class=\"testGroup\">\n\t\t\t\t<div class=\"testArea\">\n\t\t\t\t\t<div class=\"testName\">Download</div>\n\t\t\t\t\t<canvas id=\"dlMeter\" class=\"meter\"></canvas>\n\t\t\t\t\t<div id=\"dlText\" class=\"meterText\"></div>\n\t\t\t\t\t<div class=\"unit\">Mbps</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"testArea\">\n\t\t\t\t\t<div class=\"testName\">Upload</div>\n\t\t\t\t\t<canvas id=\"ulMeter\" class=\"meter\"></canvas>\n\t\t\t\t\t<div id=\"ulText\" class=\"meterText\"></div>\n\t\t\t\t\t<div class=\"unit\">Mbps</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<div id=\"ipArea\">\n\t\t\t\tIP Address:(<span id=\"ip\"></span>)\n\t\t\t</div>\n\t\t</div>\n\n\t\tSource code:&nbsp;\n\t\t<a href=\"https://github.com/Andyfoo/go-h5speedtest\" target=\"_blank\">go-h5speedtest</a>\n\t\t&nbsp;&nbsp;&nbsp;&nbsp;\n\t\t<a href=\"https://github.com/librespeed/speedtest\" target=\"_blank\">h5 speedtest</a>\n\t</div>\n\t<script type=\"text/javascript\">setTimeout(function () { initUI() }, 100);</script>\n</body>\n\n</html>"),
	}
	file4 := &embedded.EmbeddedFile{
		Filename:    "speedtest.js",
		FileModTime: time.Unix(1571734855, 0),

		Content: string("/*\n\tLibreSpeed - Main\n\tby Federico Dossena\n\thttps://github.com/librespeed/speedtest/\n\tGNU LGPLv3 License\n*/\n\n/*\n   This is the main interface between your webpage and the speedtest.\n   It hides the speedtest web worker to the page, and provides many convenient functions to control the test.\n   \n   The best way to learn how to use this is to look at the basic example, but here's some documentation.\n  \n   To initialize the test, create a new Speedtest object:\n    var s=new Speedtest();\n   Now you can think of this as a finite state machine. These are the states (use getState() to see them):\n   - 0: here you can change the speedtest settings (such as test duration) with the setParameter(\"parameter\",value) method. From here you can either start the test using start() (goes to state 3) or you can add multiple test points using addTestPoint(server) or addTestPoints(serverList) (goes to state 1). Additionally, this is the perfect moment to set up callbacks for the onupdate(data) and onend(aborted) events.\n   - 1: here you can add test points. You only need to do this if you want to use multiple test points.\n        A server is defined as an object like this:\n        {\n            name: \"User friendly name\",\n            server:\"http://yourBackend.com/\",     <---- URL to your server. You can specify http:// or https://. If your server supports both, just write // without the protocol\n            dlURL:\"garbage.php\"    <----- path to garbage.php or its replacement on the server\n            ulURL:\"empty.php\"    <----- path to empty.php or its replacement on the server\n            pingURL:\"empty.php\"    <----- path to empty.php or its replacement on the server. This is used to ping the server by this selector\n            getIpURL:\"getIP.php\"    <----- path to getIP.php or its replacement on the server\n        }\n        While in state 1, you can only add test points, you cannot change the test settings. When you're done, use selectServer(callback) to select the test point with the lowest ping. This is asynchronous, when it's done, it will call your callback function and move to state 2. Calling setSelectedServer(server) will manually select a server and move to state 2.\n    - 2: test point selected, ready to start the test. Use start() to begin, this will move to state 3\n    - 3: test running. Here, your onupdate event calback will be called periodically, with data coming from the worker about speed and progress. A data object will be passed to your onupdate function, with the following items:\n            - dlStatus: download speed in mbps\n            - ulStatus: upload speed in mbps\n            - pingStatus: ping in ms\n            - jitterStatus: jitter in ms\n            - dlProgress: progress of the download test as a float 0-1\n            - ulProgress: progress of the upload test as a float 0-1\n            - pingProgress: progress of the ping/jitter test as a float 0-1\n            - testState: state of the test (-1=not started, 0=starting, 1=download test, 2=ping+jitter test, 3=upload test, 4=finished, 5=aborted)\n            - clientIp: IP address of the client performing the test (and optionally ISP and distance) \n        At the end of the test, the onend function will be called, with a boolean specifying whether the test was aborted or if it ended normally.\n        The test can be aborted at any time with abort().\n        At the end of the test, it will move to state 4\n    - 4: test finished. You can run it again by calling start() if you want.\n */\n\nfunction Speedtest() {\n  this._serverList = []; //when using multiple points of test, this is a list of test points\n  this._selectedServer = null; //when using multiple points of test, this is the selected server\n  this._settings = {}; //settings for the speedtest worker\n  this._state = 0; //0=adding settings, 1=adding servers, 2=server selection done, 3=test running, 4=done\n  console.log(\n    \"LibreSpeed by Federico Dossena v5.1 - https://github.com/librespeed/speedtest\"\n  );\n}\n\nSpeedtest.prototype = {\n  constructor: Speedtest,\n  /**\n   * Returns the state of the test: 0=adding settings, 1=adding servers, 2=server selection done, 3=test running, 4=done\n   */\n  getState: function () {\n    return this._state;\n  },\n  /**\n   * Change one of the test settings from their defaults.\n   * - parameter: string with the name of the parameter that you want to set\n   * - value: new value for the parameter\n   *\n   * Invalid values or nonexistant parameters will be ignored by the speedtest worker.\n   */\n  setParameter: function (parameter, value) {\n    if (this._state != 0)\n      throw \"You cannot change the test settings after adding server or starting the test\";\n    this._settings[parameter] = value;\n    if (parameter === \"temeletry_extra\") {\n      this._originalExtra = this._settings.telemetry_extra;\n    }\n  },\n  /**\n   * Used internally to check if a server object contains all the required elements.\n   * Also fixes the server URL if needed.\n   */\n  _checkServerDefinition: function (server) {\n    try {\n      if (typeof server.name !== \"string\")\n        throw \"Name string missing from server definition (name)\";\n      if (typeof server.server !== \"string\")\n        throw \"Server address string missing from server definition (server)\";\n      if (server.server.charAt(server.server.length - 1) != \"/\")\n        server.server += \"/\";\n      if (server.server.indexOf(\"//\") == 0)\n        server.server = location.protocol + server.server;\n      if (typeof server.dlURL !== \"string\")\n        throw \"Download URL string missing from server definition (dlURL)\";\n      if (typeof server.ulURL !== \"string\")\n        throw \"Upload URL string missing from server definition (ulURL)\";\n      if (typeof server.pingURL !== \"string\")\n        throw \"Ping URL string missing from server definition (pingURL)\";\n      if (typeof server.getIpURL !== \"string\")\n        throw \"GetIP URL string missing from server definition (getIpURL)\";\n    } catch (e) {\n      throw \"Invalid server definition\";\n    }\n  },\n  /**\n   * Add a test point (multiple points of test)\n   * server: the server to be added as an object. Must contain the following elements:\n   *  {\n   *       name: \"User friendly name\",\n   *       server:\"http://yourBackend.com/\",   URL to your server. You can specify http:// or https://. If your server supports both, just write // without the protocol\n   *       dlURL:\"garbage.php\"   path to garbage.php or its replacement on the server\n   *       ulURL:\"empty.php\"   path to empty.php or its replacement on the server\n   *       pingURL:\"empty.php\"   path to empty.php or its replacement on the server. This is used to ping the server by this selector\n   *       getIpURL:\"getIP.php\"   path to getIP.php or its replacement on the server\n   *   }\n   */\n  addTestPoint: function (server) {\n    this._checkServerDefinition(server);\n    if (this._state == 0) this._state = 1;\n    if (this._state != 1) throw \"You can't add a server after server selection\";\n    this._settings.mpot = true;\n    this._serverList.push(server);\n  },\n  /**\n   * Same as addTestPoint, but you can pass an array of servers\n   */\n  addTestPoints: function (list) {\n    for (var i = 0; i < list.length; i++) this.addTestPoint(list[i]);\n  },\n  /**\n   * Returns the selected server (multiple points of test)\n   */\n  getSelectedServer: function () {\n    if (this._state < 2 || this._selectedServer == null)\n      throw \"No server is selected\";\n    return this._selectedServer;\n  },\n  /**\n   * Manually selects one of the test points (multiple points of test)\n   */\n  setSelectedServer: function (server) {\n    this._checkServerDefinition(server);\n    if (this._state == 3)\n      throw \"You can't select a server while the test is running\";\n    this._selectedServer = server;\n    this._state = 2;\n  },\n  /**\n   * Automatically selects a server from the list of added test points. The server with the lowest ping will be chosen. (multiple points of test)\n   * The process is asynchronous and the passed result callback function will be called when it's done, then the test can be started.\n   */\n  selectServer: function (result) {\n    if (this._state != 1) {\n      if (this._state == 0) throw \"No test points added\";\n      if (this._state == 2) throw \"Server already selected\";\n      if (this._state >= 3)\n        throw \"You can't select a server while the test is running\";\n    }\n    if (this._selectServerCalled) throw \"selectServer already called\"; else this._selectServerCalled = true;\n    /*this function goes through a list of servers. For each server, the ping is measured, then the server with the function result is called with the best server, or null if all the servers were down.\n     */\n    var select = function (serverList, result) {\n      //pings the specified URL, then calls the function result. Result will receive a parameter which is either the time it took to ping the URL, or -1 if something went wrong.\n      var PING_TIMEOUT = 2000;\n      var USE_PING_TIMEOUT = true; //will be disabled on unsupported browsers\n      if (/MSIE.(\\d+\\.\\d+)/i.test(navigator.userAgent)) {\n        //IE11 doesn't support XHR timeout\n        USE_PING_TIMEOUT = false;\n      }\n      var ping = function (url, result) {\n        url += (url.match(/\\?/) ? \"&\" : \"?\") + \"cors=true\";\n        var xhr = new XMLHttpRequest();\n        var t = new Date().getTime();\n        xhr.onload = function () {\n          if (xhr.responseText.length == 0) {\n            //we expect an empty response\n            var instspd = new Date().getTime() - t; //rough timing estimate\n            try {\n              //try to get more accurate timing using performance API\n              var p = performance.getEntriesByName(url);\n              p = p[p.length - 1];\n              var d = p.responseStart - p.requestStart;\n              if (d <= 0) d = p.duration;\n              if (d > 0 && d < instspd) instspd = d;\n            } catch (e) { }\n            result(instspd);\n          } else result(-1);\n        }.bind(this);\n        xhr.onerror = function () {\n          result(-1);\n        }.bind(this);\n        xhr.open(\"GET\", url);\n        if (USE_PING_TIMEOUT) {\n          try {\n            xhr.timeout = PING_TIMEOUT;\n            xhr.ontimeout = xhr.onerror;\n          } catch (e) { }\n        }\n        xhr.send();\n      }.bind(this);\n\n      //this function repeatedly pings a server to get a good estimate of the ping. When it's done, it calls the done function without parameters. At the end of the execution, the server will have a new parameter called pingT, which is either the best ping we got from the server or -1 if something went wrong.\n      var PINGS = 3, //up to 3 pings are performed, unless the server is down...\n        SLOW_THRESHOLD = 500; //...or one of the pings is above this threshold\n      var checkServer = function (server, done) {\n        var i = 0;\n        server.pingT = -1;\n        if (server.server.indexOf(location.protocol) == -1) done();\n        else {\n          var nextPing = function () {\n            if (i++ == PINGS) {\n              done();\n              return;\n            }\n            ping(\n              server.server + server.pingURL,\n              function (t) {\n                if (t >= 0) {\n                  if (t < server.pingT || server.pingT == -1) server.pingT = t;\n                  if (t < SLOW_THRESHOLD) nextPing();\n                  else done();\n                } else done();\n              }.bind(this)\n            );\n          }.bind(this);\n          nextPing();\n        }\n      }.bind(this);\n      //check servers in list, one by one\n      var i = 0;\n      var done = function () {\n        var bestServer = null;\n        for (var i = 0; i < serverList.length; i++) {\n          if (\n            serverList[i].pingT != -1 &&\n            (bestServer == null || serverList[i].pingT < bestServer.pingT)\n          )\n            bestServer = serverList[i];\n        }\n        result(bestServer);\n      }.bind(this);\n      var nextServer = function () {\n        if (i == serverList.length) {\n          done();\n          return;\n        }\n        checkServer(serverList[i++], nextServer);\n      }.bind(this);\n      nextServer();\n    }.bind(this);\n\n    //parallel server selection\n    var CONCURRENCY = 6;\n    var serverLists = [];\n    for (var i = 0; i < CONCURRENCY; i++) {\n      serverLists[i] = [];\n    }\n    for (var i = 0; i < this._serverList.length; i++) {\n      serverLists[i % CONCURRENCY].push(this._serverList[i]);\n    }\n    var completed = 0;\n    var bestServer = null;\n    for (var i = 0; i < CONCURRENCY; i++) {\n      select(\n        serverLists[i],\n        function (server) {\n          if (server != null) {\n            if (bestServer == null || server.pingT < bestServer.pingT)\n              bestServer = server;\n          }\n          completed++;\n          if (completed == CONCURRENCY) {\n            this._selectedServer = bestServer;\n            this._state = 2;\n            if (result) result(bestServer);\n          }\n        }.bind(this)\n      );\n    }\n  },\n  /**\n   * Starts the test.\n   * During the test, the onupdate(data) callback function will be called periodically with data from the worker.\n   * At the end of the test, the onend(aborted) function will be called with a boolean telling you if the test was aborted or if it ended normally.\n   */\n  start: function () {\n    if (this._state == 3) throw \"Test already running\";\n    this.worker = new Worker(\"speedtest_worker.js?r=\" + Math.random());\n    this.worker.onmessage = function (e) {\n      if (e.data === this._prevData) return;\n      else this._prevData = e.data;\n      var data = JSON.parse(e.data);\n      try {\n        if (this.onupdate) this.onupdate(data);\n      } catch (e) {\n        console.error(\"Speedtest onupdate event threw exception: \" + e);\n      }\n      if (data.testState >= 4) {\n        try {\n          if (this.onend) this.onend(data.testState == 5);\n        } catch (e) {\n          console.error(\"Speedtest onend event threw exception: \" + e);\n        }\n        clearInterval(this.updater);\n        this._state = 4;\n      }\n    }.bind(this);\n    this.updater = setInterval(\n      function () {\n        this.worker.postMessage(\"status\");\n      }.bind(this),\n      200\n    );\n    if (this._state == 1)\n      throw \"When using multiple points of test, you must call selectServer before starting the test\";\n    if (this._state == 2) {\n      this._settings.url_dl =\n        this._selectedServer.server + this._selectedServer.dlURL;\n      this._settings.url_ul =\n        this._selectedServer.server + this._selectedServer.ulURL;\n      this._settings.url_ping =\n        this._selectedServer.server + this._selectedServer.pingURL;\n      this._settings.url_getIp =\n        this._selectedServer.server + this._selectedServer.getIpURL;\n      if (typeof this._originalExtra !== \"undefined\") {\n        this._settings.telemetry_extra = JSON.stringify({\n          server: this._selectedServer.name,\n          extra: this._originalExtra\n        });\n      } else\n        this._settings.telemetry_extra = JSON.stringify({\n          server: this._selectedServer.name\n        });\n    }\n    this._state = 3;\n    this.worker.postMessage(\"start \" + JSON.stringify(this._settings));\n  },\n  /**\n   * Aborts the test while it's running.\n   */\n  abort: function () {\n    if (this._state < 3) throw \"You cannot abort a test that's not started yet\";\n    if (this._state < 4) this.worker.postMessage(\"abort\");\n  }\n};\n"),
	}
	file5 := &embedded.EmbeddedFile{
		Filename:    "speedtest_worker.js",
		FileModTime: time.Unix(1571735018, 0),

		Content: string("/*\n\tLibreSpeed - Worker\n\tby Federico Dossena\n\thttps://github.com/librespeed/speedtest/\n\tGNU LGPLv3 License\n*/\n\n// data reported to main thread\nvar testState = -1; // -1=not started, 0=starting, 1=download test, 2=ping+jitter test, 3=upload test, 4=finished, 5=abort\nvar dlStatus = \"\"; // download speed in megabit/s with 2 decimal digits\nvar ulStatus = \"\"; // upload speed in megabit/s with 2 decimal digits\nvar pingStatus = \"\"; // ping in milliseconds with 2 decimal digits\nvar jitterStatus = \"\"; // jitter in milliseconds with 2 decimal digits\nvar clientIp = \"\"; // client's IP address as reported by getIP.php\nvar dlProgress = 0; //progress of download test 0-1\nvar ulProgress = 0; //progress of upload test 0-1\nvar pingProgress = 0; //progress of ping+jitter test 0-1\nvar testId = null; //test ID (sent back by telemetry if used, null otherwise)\n\nvar log = \"\"; //telemetry log\nfunction tlog(s) {\n\tif (settings.telemetry_level >= 2) {\n\t\tlog += Date.now() + \": \" + s + \"\\n\";\n\t}\n}\nfunction tverb(s) {\n\tif (settings.telemetry_level >= 3) {\n\t\tlog += Date.now() + \": \" + s + \"\\n\";\n\t}\n}\nfunction twarn(s) {\n\tif (settings.telemetry_level >= 2) {\n\t\tlog += Date.now() + \" WARN: \" + s + \"\\n\";\n\t}\n\tconsole.warn(s);\n}\n\n// test settings. can be overridden by sending specific values with the start command\nvar settings = {\n\tmpot: false, //set to true when in MPOT mode\n\ttest_order: \"IP_D_U\", //order in which tests will be performed as a string. D=Download, U=Upload, P=Ping+Jitter, I=IP, _=1 second delay\n\ttime_ul_max: 15, // max duration of upload test in seconds\n\ttime_dl_max: 15, // max duration of download test in seconds\n\ttime_auto: true, // if set to true, tests will take less time on faster connections\n\ttime_ulGraceTime: 3, //time to wait in seconds before actually measuring ul speed (wait for buffers to fill)\n\ttime_dlGraceTime: 1.5, //time to wait in seconds before actually measuring dl speed (wait for TCP window to increase)\n\tcount_ping: 10, // number of pings to perform in ping test\n\turl_dl: \"garbage.php\", // path to a large file or garbage.php, used for download test. must be relative to this js file\n\turl_ul: \"empty.php\", // path to an empty file, used for upload test. must be relative to this js file\n\turl_ping: \"empty.php\", // path to an empty file, used for ping test. must be relative to this js file\n\turl_getIp: \"getIP.php\", // path to getIP.php relative to this js file, or a similar thing that outputs the client's ip\n\tgetIp_ispInfo: true, //if set to true, the server will include ISP info with the IP address\n\tgetIp_ispInfo_distance: \"km\", //km or mi=estimate distance from server in km/mi; set to false to disable distance estimation. getIp_ispInfo must be enabled in order for this to work\n\txhr_dlMultistream: 6, // number of download streams to use (can be different if enable_quirks is active)\n\txhr_ulMultistream: 3, // number of upload streams to use (can be different if enable_quirks is active)\n\txhr_multistreamDelay: 300, //how much concurrent requests should be delayed\n\txhr_ignoreErrors: 1, // 0=fail on errors, 1=attempt to restart a stream if it fails, 2=ignore all errors\n\txhr_dlUseBlob: false, // if set to true, it reduces ram usage but uses the hard drive (useful with large garbagePhp_chunkSize and/or high xhr_dlMultistream)\n\txhr_ul_blob_megabytes: 20, //size in megabytes of the upload blobs sent in the upload test (forced to 4 on chrome mobile)\n\tgarbagePhp_chunkSize: 100, // size of chunks sent by garbage.php (can be different if enable_quirks is active)\n\tenable_quirks: true, // enable quirks for specific browsers. currently it overrides settings to optimize for specific browsers, unless they are already being overridden with the start command\n\tping_allowPerformanceApi: true, // if enabled, the ping test will attempt to calculate the ping more precisely using the Performance API. Currently works perfectly in Chrome, badly in Edge, and not at all in Firefox. If Performance API is not supported or the result is obviously wrong, a fallback is provided.\n\toverheadCompensationFactor: 1.06, //can be changed to compensatie for transport overhead. (see doc.md for some other values)\n\tuseMebibits: false, //if set to true, speed will be reported in mebibits/s instead of megabits/s\n\ttelemetry_level: 0, // 0=disabled, 1=basic (results only), 2=full (results and timing) 3=debug (results+log)\n\turl_telemetry: \"results/telemetry.php\", // path to the script that adds telemetry data to the database\n\ttelemetry_extra: \"\" //extra data that can be passed to the telemetry through the settings\n};\n\nvar xhr = null; // array of currently active xhr requests\nvar interval = null; // timer used in tests\nvar test_pointer = 0; //pointer to the next test to run inside settings.test_order\n\n/*\n  this function is used on URLs passed in the settings to determine whether we need a ? or an & as a separator\n*/\nfunction url_sep(url) {\n\treturn url.match(/\\?/) ? \"&\" : \"?\";\n}\n\n/*\n\tlistener for commands from main thread to this worker.\n\tcommands:\n\t-status: returns the current status as a JSON string containing testState, dlStatus, ulStatus, pingStatus, clientIp, jitterStatus, dlProgress, ulProgress, pingProgress\n\t-abort: aborts the current test\n\t-start: starts the test. optionally, settings can be passed as JSON.\n\t\texample: start {\"time_ul_max\":\"10\", \"time_dl_max\":\"10\", \"count_ping\":\"50\"}\n*/\nthis.addEventListener(\"message\", function (e) {\n\tvar params = e.data.split(\" \");\n\tif (params[0] === \"status\") {\n\t\t// return status\n\t\tpostMessage(\n\t\t\tJSON.stringify({\n\t\t\t\ttestState: testState,\n\t\t\t\tdlStatus: dlStatus,\n\t\t\t\tulStatus: ulStatus,\n\t\t\t\tpingStatus: pingStatus,\n\t\t\t\tclientIp: clientIp,\n\t\t\t\tjitterStatus: jitterStatus,\n\t\t\t\tdlProgress: dlProgress,\n\t\t\t\tulProgress: ulProgress,\n\t\t\t\tpingProgress: pingProgress,\n\t\t\t\ttestId: testId\n\t\t\t})\n\t\t);\n\t}\n\tif (params[0] === \"start\" && testState === -1) {\n\t\t// start new test\n\t\ttestState = 0;\n\t\ttry {\n\t\t\t// parse settings, if present\n\t\t\tvar s = {};\n\t\t\ttry {\n\t\t\t\tvar ss = e.data.substring(5);\n\t\t\t\tif (ss) s = JSON.parse(ss);\n\t\t\t} catch (e) {\n\t\t\t\ttwarn(\"Error parsing custom settings JSON. Please check your syntax\");\n\t\t\t}\n\t\t\t//copy custom settings\n\t\t\tfor (var key in s) {\n\t\t\t\tif (typeof settings[key] !== \"undefined\") settings[key] = s[key];\n\t\t\t\telse twarn(\"Unknown setting ignored: \" + key);\n\t\t\t}\n\t\t\t// quirks for specific browsers. apply only if not overridden. more may be added in future releases\n\t\t\tif (settings.enable_quirks || (typeof s.enable_quirks !== \"undefined\" && s.enable_quirks)) {\n\t\t\t\tvar ua = navigator.userAgent;\n\t\t\t\tif (/Firefox.(\\d+\\.\\d+)/i.test(ua)) {\n\t\t\t\t\tif (typeof s.ping_allowPerformanceApi === \"undefined\") {\n\t\t\t\t\t\t// ff performance API sucks\n\t\t\t\t\t\tsettings.ping_allowPerformanceApi = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (/Edge.(\\d+\\.\\d+)/i.test(ua)) {\n\t\t\t\t\tif (typeof s.xhr_dlMultistream === \"undefined\") {\n\t\t\t\t\t\t// edge more precise with 3 download streams\n\t\t\t\t\t\tsettings.xhr_dlMultistream = 3;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (/Chrome.(\\d+)/i.test(ua) && !!self.fetch) {\n\t\t\t\t\tif (typeof s.xhr_dlMultistream === \"undefined\") {\n\t\t\t\t\t\t// chrome more precise with 5 streams\n\t\t\t\t\t\tsettings.xhr_dlMultistream = 5;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (/Edge.(\\d+\\.\\d+)/i.test(ua)) {\n\t\t\t\t//Edge 15 introduced a bug that causes onprogress events to not get fired, we have to use the \"small chunks\" workaround that reduces accuracy\n\t\t\t\tsettings.forceIE11Workaround = true;\n\t\t\t}\n\t\t\tif (/PlayStation 4.(\\d+\\.\\d+)/i.test(ua)) {\n\t\t\t\t//PS4 browser has the same bug as IE11/Edge\n\t\t\t\tsettings.forceIE11Workaround = true;\n\t\t\t}\n\t\t\tif (/Chrome.(\\d+)/i.test(ua) && /Android|iPhone|iPad|iPod|Windows Phone/i.test(ua)) {\n\t\t\t\t//cheap af\n\t\t\t\t//Chrome mobile introduced a limitation somewhere around version 65, we have to limit XHR upload size to 4 megabytes\n\t\t\t\tsettings.xhr_ul_blob_megabytes = 4;\n\t\t\t}\n\t\t\tif (/^((?!chrome|android|crios|fxios).)*safari/i.test(ua)) {\n\t\t\t\t//Safari also needs the IE11 workaround but only for the MPOT version\n\t\t\t\tsettings.forceIE11Workaround = true;\n\t\t\t}\n\t\t\t//telemetry_level has to be parsed and not just copied\n\t\t\tif (typeof s.telemetry_level !== \"undefined\") settings.telemetry_level = s.telemetry_level === \"basic\" ? 1 : s.telemetry_level === \"full\" ? 2 : s.telemetry_level === \"debug\" ? 3 : 0; // telemetry level\n\t\t\t//transform test_order to uppercase, just in case\n\t\t\tsettings.test_order = settings.test_order.toUpperCase();\n\t\t} catch (e) {\n\t\t\ttwarn(\"Possible error in custom test settings. Some settings might not have been applied. Exception: \" + e);\n\t\t}\n\t\t// run the tests\n\t\ttverb(JSON.stringify(settings));\n\t\ttest_pointer = 0;\n\t\tvar iRun = false,\n\t\t\tdRun = false,\n\t\t\tuRun = false,\n\t\t\tpRun = false;\n\t\tvar runNextTest = function () {\n\t\t\tif (testState == 5) return;\n\t\t\tif (test_pointer >= settings.test_order.length) {\n\t\t\t\t//test is finished\n\t\t\t\tif (settings.telemetry_level > 0)\n\t\t\t\t\tsendTelemetry(function (id) {\n\t\t\t\t\t\ttestState = 4;\n\t\t\t\t\t\tif (id != null) testId = id;\n\t\t\t\t\t});\n\t\t\t\telse testState = 4;\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tswitch (settings.test_order.charAt(test_pointer)) {\n\t\t\t\tcase \"I\":\n\t\t\t\t\t{\n\t\t\t\t\t\ttest_pointer++;\n\t\t\t\t\t\tif (iRun) {\n\t\t\t\t\t\t\trunNextTest();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t} else iRun = true;\n\t\t\t\t\t\tgetIp(runNextTest);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"D\":\n\t\t\t\t\t{\n\t\t\t\t\t\ttest_pointer++;\n\t\t\t\t\t\tif (dRun) {\n\t\t\t\t\t\t\trunNextTest();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t} else dRun = true;\n\t\t\t\t\t\ttestState = 1;\n\t\t\t\t\t\tdlTest(runNextTest);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"U\":\n\t\t\t\t\t{\n\t\t\t\t\t\ttest_pointer++;\n\t\t\t\t\t\tif (uRun) {\n\t\t\t\t\t\t\trunNextTest();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t} else uRun = true;\n\t\t\t\t\t\ttestState = 3;\n\t\t\t\t\t\tulTest(runNextTest);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"P\":\n\t\t\t\t\t{\n\t\t\t\t\t\ttest_pointer++;\n\t\t\t\t\t\tif (pRun) {\n\t\t\t\t\t\t\trunNextTest();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t} else pRun = true;\n\t\t\t\t\t\ttestState = 2;\n\t\t\t\t\t\tpingTest(runNextTest);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"_\":\n\t\t\t\t\t{\n\t\t\t\t\t\ttest_pointer++;\n\t\t\t\t\t\tsetTimeout(runNextTest, 1000);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\ttest_pointer++;\n\t\t\t}\n\t\t};\n\t\trunNextTest();\n\t}\n\tif (params[0] === \"abort\") {\n\t\t// abort command\n\t\tif (testState >= 4) return;\n\t\ttlog(\"manually aborted\");\n\t\tclearRequests(); // stop all xhr activity\n\t\trunNextTest = null;\n\t\tif (interval) clearInterval(interval); // clear timer if present\n\t\tif (settings.telemetry_level > 1) sendTelemetry(function () { });\n\t\ttestState = 5; //set test as aborted\n\t\tdlStatus = \"\";\n\t\tulStatus = \"\";\n\t\tpingStatus = \"\";\n\t\tjitterStatus = \"\";\n\t\tclientIp = \"\";\n\t\tdlProgress = 0;\n\t\tulProgress = 0;\n\t\tpingProgress = 0;\n\t}\n});\n// stops all XHR activity, aggressively\nfunction clearRequests() {\n\ttverb(\"stopping pending XHRs\");\n\tif (xhr) {\n\t\tfor (var i = 0; i < xhr.length; i++) {\n\t\t\ttry {\n\t\t\t\txhr[i].onprogress = null;\n\t\t\t\txhr[i].onload = null;\n\t\t\t\txhr[i].onerror = null;\n\t\t\t} catch (e) { }\n\t\t\ttry {\n\t\t\t\txhr[i].upload.onprogress = null;\n\t\t\t\txhr[i].upload.onload = null;\n\t\t\t\txhr[i].upload.onerror = null;\n\t\t\t} catch (e) { }\n\t\t\ttry {\n\t\t\t\txhr[i].abort();\n\t\t\t} catch (e) { }\n\t\t\ttry {\n\t\t\t\tdelete xhr[i];\n\t\t\t} catch (e) { }\n\t\t}\n\t\txhr = null;\n\t}\n}\n// gets client's IP using url_getIp, then calls the done function\nvar ipCalled = false; // used to prevent multiple accidental calls to getIp\nvar ispInfo = \"\"; //used for telemetry\nfunction getIp(done) {\n\ttverb(\"getIp\");\n\tif (ipCalled) return;\n\telse ipCalled = true; // getIp already called?\n\tvar startT = new Date().getTime();\n\txhr = new XMLHttpRequest();\n\txhr.onload = function () {\n\t\ttlog(\"IP: \" + xhr.responseText + \", took \" + (new Date().getTime() - startT) + \"ms\");\n\t\ttry {\n\t\t\tvar data = JSON.parse(xhr.responseText);\n\t\t\tclientIp = data.processedString;\n\t\t\tispInfo = data.rawIspInfo;\n\t\t} catch (e) {\n\t\t\tclientIp = xhr.responseText;\n\t\t\tispInfo = \"\";\n\t\t}\n\t\tdone();\n\t};\n\txhr.onerror = function () {\n\t\ttlog(\"getIp failed, took \" + (new Date().getTime() - startT) + \"ms\");\n\t\tdone();\n\t};\n\txhr.open(\"GET\", settings.url_getIp + url_sep(settings.url_getIp) + (settings.mpot ? \"cors=true&\" : \"\") + (settings.getIp_ispInfo ? \"isp=true\" + (settings.getIp_ispInfo_distance ? \"&distance=\" + settings.getIp_ispInfo_distance + \"&\" : \"&\") : \"&\") + \"r=\" + Math.random(), true);\n\txhr.send();\n}\n// download test, calls done function when it's over\nvar dlCalled = false; // used to prevent multiple accidental calls to dlTest\nfunction dlTest(done) {\n\ttverb(\"dlTest\");\n\tif (dlCalled) return;\n\telse dlCalled = true; // dlTest already called?\n\tvar totLoaded = 0.0, // total number of loaded bytes\n\t\tstartT = new Date().getTime(), // timestamp when test was started\n\t\tbonusT = 0, //how many milliseconds the test has been shortened by (higher on faster connections)\n\t\tgraceTimeDone = false, //set to true after the grace time is past\n\t\tfailed = false; // set to true if a stream fails\n\txhr = [];\n\t// function to create a download stream. streams are slightly delayed so that they will not end at the same time\n\tvar testStream = function (i, delay) {\n\t\tsetTimeout(\n\t\t\tfunction () {\n\t\t\t\tif (testState !== 1) return; // delayed stream ended up starting after the end of the download test\n\t\t\t\ttverb(\"dl test stream started \" + i + \" \" + delay);\n\t\t\t\tvar prevLoaded = 0; // number of bytes loaded last time onprogress was called\n\t\t\t\tvar x = new XMLHttpRequest();\n\t\t\t\txhr[i] = x;\n\t\t\t\txhr[i].onprogress = function (event) {\n\t\t\t\t\ttverb(\"dl stream progress event \" + i + \" \" + event.loaded);\n\t\t\t\t\tif (testState !== 1) {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tx.abort();\n\t\t\t\t\t\t} catch (e) { }\n\t\t\t\t\t} // just in case this XHR is still running after the download test\n\t\t\t\t\t// progress event, add number of new loaded bytes to totLoaded\n\t\t\t\t\tvar loadDiff = event.loaded <= 0 ? 0 : event.loaded - prevLoaded;\n\t\t\t\t\tif (isNaN(loadDiff) || !isFinite(loadDiff) || loadDiff < 0) return; // just in case\n\t\t\t\t\ttotLoaded += loadDiff;\n\t\t\t\t\tprevLoaded = event.loaded;\n\t\t\t\t}.bind(this);\n\t\t\t\txhr[i].onload = function () {\n\t\t\t\t\t// the large file has been loaded entirely, start again\n\t\t\t\t\ttverb(\"dl stream finished \" + i);\n\t\t\t\t\ttry {\n\t\t\t\t\t\txhr[i].abort();\n\t\t\t\t\t} catch (e) { } // reset the stream data to empty ram\n\t\t\t\t\ttestStream(i, 0);\n\t\t\t\t}.bind(this);\n\t\t\t\txhr[i].onerror = function () {\n\t\t\t\t\t// error\n\t\t\t\t\ttverb(\"dl stream failed \" + i);\n\t\t\t\t\tif (settings.xhr_ignoreErrors === 0) failed = true; //abort\n\t\t\t\t\ttry {\n\t\t\t\t\t\txhr[i].abort();\n\t\t\t\t\t} catch (e) { }\n\t\t\t\t\tdelete xhr[i];\n\t\t\t\t\tif (settings.xhr_ignoreErrors === 1) testStream(i, 0); //restart stream\n\t\t\t\t}.bind(this);\n\t\t\t\t// send xhr\n\t\t\t\ttry {\n\t\t\t\t\tif (settings.xhr_dlUseBlob) xhr[i].responseType = \"blob\";\n\t\t\t\t\telse xhr[i].responseType = \"arraybuffer\";\n\t\t\t\t} catch (e) { }\n\t\t\t\txhr[i].open(\"GET\", settings.url_dl + url_sep(settings.url_dl) + (settings.mpot ? \"cors=true&\" : \"\") + \"r=\" + Math.random() + \"&ckSize=\" + settings.garbagePhp_chunkSize, true); // random string to prevent caching\n\t\t\t\txhr[i].send();\n\t\t\t}.bind(this),\n\t\t\t1 + delay\n\t\t);\n\t}.bind(this);\n\t// open streams\n\tfor (var i = 0; i < settings.xhr_dlMultistream; i++) {\n\t\ttestStream(i, settings.xhr_multistreamDelay * i);\n\t}\n\t// every 200ms, update dlStatus\n\tinterval = setInterval(\n\t\tfunction () {\n\t\t\ttverb(\"DL: \" + dlStatus + (graceTimeDone ? \"\" : \" (in grace time)\"));\n\t\t\tvar t = new Date().getTime() - startT;\n\t\t\tif (graceTimeDone) dlProgress = (t + bonusT) / (settings.time_dl_max * 1000);\n\t\t\tif (t < 200) return;\n\t\t\tif (!graceTimeDone) {\n\t\t\t\tif (t > 1000 * settings.time_dlGraceTime) {\n\t\t\t\t\tif (totLoaded > 0) {\n\t\t\t\t\t\t// if the connection is so slow that we didn't get a single chunk yet, do not reset\n\t\t\t\t\t\tstartT = new Date().getTime();\n\t\t\t\t\t\tbonusT = 0;\n\t\t\t\t\t\ttotLoaded = 0.0;\n\t\t\t\t\t}\n\t\t\t\t\tgraceTimeDone = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar speed = totLoaded / (t / 1000.0);\n\t\t\t\tif (settings.time_auto) {\n\t\t\t\t\t//decide how much to shorten the test. Every 200ms, the test is shortened by the bonusT calculated here\n\t\t\t\t\tvar bonus = (6.4 * speed) / 100000;\n\t\t\t\t\tbonusT += bonus > 800 ? 800 : bonus;\n\t\t\t\t}\n\t\t\t\t//update status\n\t\t\t\tdlStatus = ((speed * 8 * settings.overheadCompensationFactor) / (settings.useMebibits ? 1048576 : 1000000)).toFixed(2); // speed is multiplied by 8 to go from bytes to bits, overhead compensation is applied, then everything is divided by 1048576 or 1000000 to go to megabits/mebibits\n\t\t\t\tif ((t + bonusT) / 1000.0 > settings.time_dl_max || failed) {\n\t\t\t\t\t// test is over, stop streams and timer\n\t\t\t\t\tif (failed || isNaN(dlStatus)) dlStatus = \"Fail\";\n\t\t\t\t\tclearRequests();\n\t\t\t\t\tclearInterval(interval);\n\t\t\t\t\tdlProgress = 1;\n\t\t\t\t\ttlog(\"dlTest: \" + dlStatus + \", took \" + (new Date().getTime() - startT) + \"ms\");\n\t\t\t\t\tdone();\n\t\t\t\t}\n\t\t\t}\n\t\t}.bind(this),\n\t\t200\n\t);\n}\n// upload test, calls done function whent it's over\nvar ulCalled = false; // used to prevent multiple accidental calls to ulTest\nfunction ulTest(done) {\n\ttverb(\"ulTest\");\n\tif (ulCalled) return;\n\telse ulCalled = true; // ulTest already called?\n\t// garbage data for upload test\n\tvar r = new ArrayBuffer(1048576);\n\tvar maxInt = Math.pow(2, 32) - 1;\n\ttry {\n\t\tr = new Uint32Array(r);\n\t\tfor (var i = 0; i < r.length; i++) r[i] = Math.random() * maxInt;\n\t} catch (e) { }\n\tvar req = [];\n\tvar reqsmall = [];\n\tfor (var i = 0; i < settings.xhr_ul_blob_megabytes; i++) req.push(r);\n\treq = new Blob(req);\n\tr = new ArrayBuffer(262144);\n\ttry {\n\t\tr = new Uint32Array(r);\n\t\tfor (var i = 0; i < r.length; i++) r[i] = Math.random() * maxInt;\n\t} catch (e) { }\n\treqsmall.push(r);\n\treqsmall = new Blob(reqsmall);\n\tvar testFunction = function () {\n\t\tvar totLoaded = 0.0, // total number of transmitted bytes\n\t\t\tstartT = new Date().getTime(), // timestamp when test was started\n\t\t\tbonusT = 0, //how many milliseconds the test has been shortened by (higher on faster connections)\n\t\t\tgraceTimeDone = false, //set to true after the grace time is past\n\t\t\tfailed = false; // set to true if a stream fails\n\t\txhr = [];\n\t\t// function to create an upload stream. streams are slightly delayed so that they will not end at the same time\n\t\tvar testStream = function (i, delay) {\n\t\t\tsetTimeout(\n\t\t\t\tfunction () {\n\t\t\t\t\tif (testState !== 3) return; // delayed stream ended up starting after the end of the upload test\n\t\t\t\t\ttverb(\"ul test stream started \" + i + \" \" + delay);\n\t\t\t\t\tvar prevLoaded = 0; // number of bytes transmitted last time onprogress was called\n\t\t\t\t\tvar x = new XMLHttpRequest();\n\t\t\t\t\txhr[i] = x;\n\t\t\t\t\tvar ie11workaround;\n\t\t\t\t\tif (settings.forceIE11Workaround) ie11workaround = true;\n\t\t\t\t\telse {\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\txhr[i].upload.onprogress;\n\t\t\t\t\t\t\tie11workaround = false;\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tie11workaround = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (ie11workaround) {\n\t\t\t\t\t\t// IE11 workarond: xhr.upload does not work properly, therefore we send a bunch of small 256k requests and use the onload event as progress. This is not precise, especially on fast connections\n\t\t\t\t\t\txhr[i].onload = xhr[i].onerror = function () {\n\t\t\t\t\t\t\ttverb(\"ul stream progress event (ie11wa)\");\n\t\t\t\t\t\t\ttotLoaded += reqsmall.size;\n\t\t\t\t\t\t\ttestStream(i, 0);\n\t\t\t\t\t\t};\n\t\t\t\t\t\txhr[i].open(\"POST\", settings.url_ul + url_sep(settings.url_ul) + (settings.mpot ? \"cors=true&\" : \"\") + \"r=\" + Math.random(), true); // random string to prevent caching\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\txhr[i].setRequestHeader(\"Content-Encoding\", \"identity\"); // disable compression (some browsers may refuse it, but data is incompressible anyway)\n\t\t\t\t\t\t} catch (e) { }\n\t\t\t\t\t\t//No Content-Type header in MPOT branch because it triggers bugs in some browsers\n\t\t\t\t\t\txhr[i].send(reqsmall);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// REGULAR version, no workaround\n\t\t\t\t\t\txhr[i].upload.onprogress = function (event) {\n\t\t\t\t\t\t\ttverb(\"ul stream progress event \" + i + \" \" + event.loaded);\n\t\t\t\t\t\t\tif (testState !== 3) {\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tx.abort();\n\t\t\t\t\t\t\t\t} catch (e) { }\n\t\t\t\t\t\t\t} // just in case this XHR is still running after the upload test\n\t\t\t\t\t\t\t// progress event, add number of new loaded bytes to totLoaded\n\t\t\t\t\t\t\tvar loadDiff = event.loaded <= 0 ? 0 : event.loaded - prevLoaded;\n\t\t\t\t\t\t\tif (isNaN(loadDiff) || !isFinite(loadDiff) || loadDiff < 0) return; // just in case\n\t\t\t\t\t\t\ttotLoaded += loadDiff;\n\t\t\t\t\t\t\tprevLoaded = event.loaded;\n\t\t\t\t\t\t}.bind(this);\n\t\t\t\t\t\txhr[i].upload.onload = function () {\n\t\t\t\t\t\t\t// this stream sent all the garbage data, start again\n\t\t\t\t\t\t\ttverb(\"ul stream finished \" + i);\n\t\t\t\t\t\t\ttestStream(i, 0);\n\t\t\t\t\t\t}.bind(this);\n\t\t\t\t\t\txhr[i].upload.onerror = function () {\n\t\t\t\t\t\t\ttverb(\"ul stream failed \" + i);\n\t\t\t\t\t\t\tif (settings.xhr_ignoreErrors === 0) failed = true; //abort\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\txhr[i].abort();\n\t\t\t\t\t\t\t} catch (e) { }\n\t\t\t\t\t\t\tdelete xhr[i];\n\t\t\t\t\t\t\tif (settings.xhr_ignoreErrors === 1) testStream(i, 0); //restart stream\n\t\t\t\t\t\t}.bind(this);\n\t\t\t\t\t\t// send xhr\n\t\t\t\t\t\txhr[i].open(\"POST\", settings.url_ul + url_sep(settings.url_ul) + (settings.mpot ? \"cors=true&\" : \"\") + \"r=\" + Math.random(), true); // random string to prevent caching\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\txhr[i].setRequestHeader(\"Content-Encoding\", \"identity\"); // disable compression (some browsers may refuse it, but data is incompressible anyway)\n\t\t\t\t\t\t} catch (e) { }\n\t\t\t\t\t\t//No Content-Type header in MPOT branch because it triggers bugs in some browsers\n\t\t\t\t\t\txhr[i].send(req);\n\t\t\t\t\t}\n\t\t\t\t}.bind(this),\n\t\t\t\t1\n\t\t\t);\n\t\t}.bind(this);\n\t\t// open streams\n\t\tfor (var i = 0; i < settings.xhr_ulMultistream; i++) {\n\t\t\ttestStream(i, settings.xhr_multistreamDelay * i);\n\t\t}\n\t\t// every 200ms, update ulStatus\n\t\tinterval = setInterval(\n\t\t\tfunction () {\n\t\t\t\ttverb(\"UL: \" + ulStatus + (graceTimeDone ? \"\" : \" (in grace time)\"));\n\t\t\t\tvar t = new Date().getTime() - startT;\n\t\t\t\tif (graceTimeDone) ulProgress = (t + bonusT) / (settings.time_ul_max * 1000);\n\t\t\t\tif (t < 200) return;\n\t\t\t\tif (!graceTimeDone) {\n\t\t\t\t\tif (t > 1000 * settings.time_ulGraceTime) {\n\t\t\t\t\t\tif (totLoaded > 0) {\n\t\t\t\t\t\t\t// if the connection is so slow that we didn't get a single chunk yet, do not reset\n\t\t\t\t\t\t\tstartT = new Date().getTime();\n\t\t\t\t\t\t\tbonusT = 0;\n\t\t\t\t\t\t\ttotLoaded = 0.0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tgraceTimeDone = true;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tvar speed = totLoaded / (t / 1000.0);\n\t\t\t\t\tif (settings.time_auto) {\n\t\t\t\t\t\t//decide how much to shorten the test. Every 200ms, the test is shortened by the bonusT calculated here\n\t\t\t\t\t\tvar bonus = (6.4 * speed) / 100000;\n\t\t\t\t\t\tbonusT += bonus > 800 ? 800 : bonus;\n\t\t\t\t\t}\n\t\t\t\t\t//update status\n\t\t\t\t\tulStatus = ((speed * 8 * settings.overheadCompensationFactor) / (settings.useMebibits ? 1048576 : 1000000)).toFixed(2); // speed is multiplied by 8 to go from bytes to bits, overhead compensation is applied, then everything is divided by 1048576 or 1000000 to go to megabits/mebibits\n\t\t\t\t\tif ((t + bonusT) / 1000.0 > settings.time_ul_max || failed) {\n\t\t\t\t\t\t// test is over, stop streams and timer\n\t\t\t\t\t\tif (failed || isNaN(ulStatus)) ulStatus = \"Fail\";\n\t\t\t\t\t\tclearRequests();\n\t\t\t\t\t\tclearInterval(interval);\n\t\t\t\t\t\tulProgress = 1;\n\t\t\t\t\t\ttlog(\"ulTest: \" + ulStatus + \", took \" + (new Date().getTime() - startT) + \"ms\");\n\t\t\t\t\t\tdone();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}.bind(this),\n\t\t\t200\n\t\t);\n\t}.bind(this);\n\tif (settings.mpot) {\n\t\ttverb(\"Sending POST request before performing upload test\");\n\t\txhr = [];\n\t\txhr[0] = new XMLHttpRequest();\n\t\txhr[0].onload = xhr[0].onerror = function () {\n\t\t\ttverb(\"POST request sent, starting upload test\");\n\t\t\ttestFunction();\n\t\t}.bind(this);\n\t\txhr[0].open(\"POST\", settings.url_ul);\n\t\txhr[0].send();\n\t} else testFunction();\n}\n// ping+jitter test, function done is called when it's over\nvar ptCalled = false; // used to prevent multiple accidental calls to pingTest\nfunction pingTest(done) {\n\ttverb(\"pingTest\");\n\tif (ptCalled) return;\n\telse ptCalled = true; // pingTest already called?\n\tvar startT = new Date().getTime(); //when the test was started\n\tvar prevT = null; // last time a pong was received\n\tvar ping = 0.0; // current ping value\n\tvar jitter = 0.0; // current jitter value\n\tvar i = 0; // counter of pongs received\n\tvar prevInstspd = 0; // last ping time, used for jitter calculation\n\txhr = [];\n\t// ping function\n\tvar doPing = function () {\n\t\ttverb(\"ping\");\n\t\tpingProgress = i / settings.count_ping;\n\t\tprevT = new Date().getTime();\n\t\txhr[0] = new XMLHttpRequest();\n\t\txhr[0].onload = function () {\n\t\t\t// pong\n\t\t\ttverb(\"pong\");\n\t\t\tif (i === 0) {\n\t\t\t\tprevT = new Date().getTime(); // first pong\n\t\t\t} else {\n\t\t\t\tvar instspd = new Date().getTime() - prevT;\n\t\t\t\tif (settings.ping_allowPerformanceApi) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\t//try to get accurate performance timing using performance api\n\t\t\t\t\t\tvar p = performance.getEntries();\n\t\t\t\t\t\tp = p[p.length - 1];\n\t\t\t\t\t\tvar d = p.responseStart - p.requestStart;\n\t\t\t\t\t\tif (d <= 0) d = p.duration;\n\t\t\t\t\t\tif (d > 0 && d < instspd) instspd = d;\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t//if not possible, keep the estimate\n\t\t\t\t\t\ttverb(\"Performance API not supported, using estimate\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//noticed that some browsers randomly have 0ms ping\n\t\t\t\tif (instspd < 1) instspd = prevInstspd;\n\t\t\t\tif (instspd < 1) instspd = 1;\n\t\t\t\tvar instjitter = Math.abs(instspd - prevInstspd);\n\t\t\t\tif (i === 1) ping = instspd;\n\t\t\t\t/* first ping, can't tell jitter yet*/ else {\n\t\t\t\t\tif (instspd < ping) ping = instspd; // update ping, if the instant ping is lower\n\t\t\t\t\tif (i === 2) jitter = instjitter;\n\t\t\t\t\t//discard the first jitter measurement because it might be much higher than it should be\n\t\t\t\t\telse jitter = instjitter > jitter ? jitter * 0.3 + instjitter * 0.7 : jitter * 0.8 + instjitter * 0.2; // update jitter, weighted average. spikes in ping values are given more weight.\n\t\t\t\t}\n\t\t\t\tprevInstspd = instspd;\n\t\t\t}\n\t\t\tpingStatus = ping.toFixed(2);\n\t\t\tjitterStatus = jitter.toFixed(2);\n\t\t\ti++;\n\t\t\ttverb(\"ping: \" + pingStatus + \" jitter: \" + jitterStatus);\n\t\t\tif (i < settings.count_ping) doPing();\n\t\t\telse {\n\t\t\t\t// more pings to do?\n\t\t\t\tpingProgress = 1;\n\t\t\t\ttlog(\"ping: \" + pingStatus + \" jitter: \" + jitterStatus + \", took \" + (new Date().getTime() - startT) + \"ms\");\n\t\t\t\tdone();\n\t\t\t}\n\t\t}.bind(this);\n\t\txhr[0].onerror = function () {\n\t\t\t// a ping failed, cancel test\n\t\t\ttverb(\"ping failed\");\n\t\t\tif (settings.xhr_ignoreErrors === 0) {\n\t\t\t\t//abort\n\t\t\t\tpingStatus = \"Fail\";\n\t\t\t\tjitterStatus = \"Fail\";\n\t\t\t\tclearRequests();\n\t\t\t\ttlog(\"ping test failed, took \" + (new Date().getTime() - startT) + \"ms\");\n\t\t\t\tpingProgress = 1;\n\t\t\t\tdone();\n\t\t\t}\n\t\t\tif (settings.xhr_ignoreErrors === 1) doPing(); //retry ping\n\t\t\tif (settings.xhr_ignoreErrors === 2) {\n\t\t\t\t//ignore failed ping\n\t\t\t\ti++;\n\t\t\t\tif (i < settings.count_ping) doPing();\n\t\t\t\telse {\n\t\t\t\t\t// more pings to do?\n\t\t\t\t\tpingProgress = 1;\n\t\t\t\t\ttlog(\"ping: \" + pingStatus + \" jitter: \" + jitterStatus + \", took \" + (new Date().getTime() - startT) + \"ms\");\n\t\t\t\t\tdone();\n\t\t\t\t}\n\t\t\t}\n\t\t}.bind(this);\n\t\t// send xhr\n\t\txhr[0].open(\"GET\", settings.url_ping + url_sep(settings.url_ping) + (settings.mpot ? \"cors=true&\" : \"\") + \"r=\" + Math.random(), true); // random string to prevent caching\n\t\txhr[0].send();\n\t}.bind(this);\n\tdoPing(); // start first ping\n}\n// telemetry\nfunction sendTelemetry(done) {\n\tif (settings.telemetry_level < 1) return;\n\txhr = new XMLHttpRequest();\n\txhr.onload = function () {\n\t\ttry {\n\t\t\tvar parts = xhr.responseText.split(\" \");\n\t\t\tif (parts[0] == \"id\") {\n\t\t\t\ttry {\n\t\t\t\t\tvar id = parts[1];\n\t\t\t\t\tdone(id);\n\t\t\t\t} catch (e) {\n\t\t\t\t\tdone(null);\n\t\t\t\t}\n\t\t\t} else done(null);\n\t\t} catch (e) {\n\t\t\tdone(null);\n\t\t}\n\t};\n\txhr.onerror = function () {\n\t\tconsole.log(\"TELEMETRY ERROR \" + xhr.status);\n\t\tdone(null);\n\t};\n\txhr.open(\"POST\", settings.url_telemetry + url_sep(settings.url_telemetry) + (settings.mpot ? \"cors=true&\" : \"\") + \"r=\" + Math.random(), true);\n\tvar telemetryIspInfo = {\n\t\tprocessedString: clientIp,\n\t\trawIspInfo: typeof ispInfo === \"object\" ? ispInfo : \"\"\n\t};\n\ttry {\n\t\tvar fd = new FormData();\n\t\tfd.append(\"ispinfo\", JSON.stringify(telemetryIspInfo));\n\t\tfd.append(\"dl\", dlStatus);\n\t\tfd.append(\"ul\", ulStatus);\n\t\tfd.append(\"ping\", pingStatus);\n\t\tfd.append(\"jitter\", jitterStatus);\n\t\tfd.append(\"log\", settings.telemetry_level > 1 ? log : \"\");\n\t\tfd.append(\"extra\", settings.telemetry_extra);\n\t\txhr.send(fd);\n\t} catch (ex) {\n\t\tvar postData = \"extra=\" + encodeURIComponent(settings.telemetry_extra) + \"&ispinfo=\" + encodeURIComponent(JSON.stringify(telemetryIspInfo)) + \"&dl=\" + encodeURIComponent(dlStatus) + \"&ul=\" + encodeURIComponent(ulStatus) + \"&ping=\" + encodeURIComponent(pingStatus) + \"&jitter=\" + encodeURIComponent(jitterStatus) + \"&log=\" + encodeURIComponent(settings.telemetry_level > 1 ? log : \"\");\n\t\txhr.setRequestHeader(\"Content-Type\", \"application/x-www-form-urlencoded\");\n\t\txhr.send(postData);\n\t}\n}\n"),
	}

	// define dirs
	dir1 := &embedded.EmbeddedDir{
		Filename:   "",
		DirModTime: time.Unix(1571734765, 0),
		ChildFiles: []*embedded.EmbeddedFile{
			file2, // "favicon.ico"
			file3, // "index.html"
			file4, // "speedtest.js"
			file5, // "speedtest_worker.js"

		},
	}

	// link ChildDirs
	dir1.ChildDirs = []*embedded.EmbeddedDir{}

	// register embeddedBox
	embedded.RegisterEmbeddedBox(`./speedtest`, &embedded.EmbeddedBox{
		Name: `./speedtest`,
		Time: time.Unix(1571734765, 0),
		Dirs: map[string]*embedded.EmbeddedDir{
			"": dir1,
		},
		Files: map[string]*embedded.EmbeddedFile{
			"favicon.ico":         file2,
			"index.html":          file3,
			"speedtest.js":        file4,
			"speedtest_worker.js": file5,
		},
	})
}
